{
  "address": "0x3E6c54A78a3f6DBAca3397A16D3ecdca9319f03B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "L2EthSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "L2USDSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxMintExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotStaker",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDeposit",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "requestIds",
          "type": "uint256[]"
        }
      ],
      "name": "ClaimedLidoWithdrawals",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DaiStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositDAI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositStEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositUSDC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositUSDT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MintWrappedETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MintWrappedUSD",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecievedLidoWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "requestIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "RequestedLidoWithdrawals",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "autoBridge",
          "type": "bool"
        }
      ],
      "name": "SetAutoBridge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "autoDeposit",
          "type": "bool"
        }
      ],
      "name": "SetAutoStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IL1StandardBridge",
          "name": "l1standardBridge",
          "type": "address"
        }
      ],
      "name": "SetL1StandardBridge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Eth",
          "type": "address"
        }
      ],
      "name": "SetL2Eth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2USD",
          "type": "address"
        }
      ],
      "name": "SetL2USD",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "SetStaker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmountWithdrew",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdAmountWithdrew",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawUSD",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_CURVE_DAI_INDEX",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_CURVE_USDT_INDEX",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_INITIAL_DEPOSIT_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_INITIAL_TOKEN_HOLDER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_WAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoBridge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "requestIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimLidoWithdrawals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "daiAmount",
          "type": "uint256"
        }
      ],
      "name": "depositDAI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "daiAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositDAIWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stEthAmount",
          "type": "uint256"
        }
      ],
      "name": "depositStEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stEthAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositStEthWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "depositUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositUSDCWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "usdtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDAIAmount",
          "type": "uint256"
        }
      ],
      "name": "depositUSDT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "contract IL1StandardBridge",
          "name": "_l1standardBridge",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1standardBridge",
      "outputs": [
        {
          "internalType": "contract IL1StandardBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2USD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintEthBasedOnStakedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintUSDBasedOnStakedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        }
      ],
      "name": "requestLidoWithdrawal",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "requestIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_autoBridge",
          "type": "bool"
        }
      ],
      "name": "setAutoBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_autoStake",
          "type": "bool"
        }
      ],
      "name": "setAutoStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IL1StandardBridge",
          "name": "_l1standardBridge",
          "type": "address"
        }
      ],
      "name": "setL1StandardBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Eth",
          "type": "address"
        }
      ],
      "name": "setL2Eth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2USD",
          "type": "address"
        }
      ],
      "name": "setL2USD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "setStaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeDAI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUSDBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUSDBalanceNoUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawStEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedEth",
      "outputs": [
        {
          "internalType": "contract WrappedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedUSD",
      "outputs": [
        {
          "internalType": "contract WrappedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1729674468a5f556cb5c6a178493de9ae2b1aae79165f993d3eebfef06762f21",
  "receipt": {
    "to": null,
    "from": "0x08C6fBA53BF2Ae19DBdC330E258B510c1C148e44",
    "contractAddress": "0x3E6c54A78a3f6DBAca3397A16D3ecdca9319f03B",
    "transactionIndex": 84,
    "gasUsed": "4239529",
    "logsBloom": "0x
    "blockHash": "0x23e8c7d19a35f6b0b5b905e1afd203bb77875b87ec6f41508bf007a7ededfb15",
    "transactionHash": "0x1729674468a5f556cb5c6a178493de9ae2b1aae79165f993d3eebfef06762f21",
    "logs": [],
    "blockNumber": 5073692,
    "cumulativeGasUsed": "17200464",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6cde7f6378c2716e46539fff4ae0ba3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"L2EthSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"L2USDSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxMintExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotStaker\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDeposit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"}],\"name\":\"ClaimedLidoWithdrawals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DaiStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"DepositDAI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"DepositEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"DepositStEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"DepositUSDC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"DepositUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintWrappedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintWrappedUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecievedLidoWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"RequestedLidoWithdrawals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoBridge\",\"type\":\"bool\"}],\"name\":\"SetAutoBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoDeposit\",\"type\":\"bool\"}],\"name\":\"SetAutoStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IL1StandardBridge\",\"name\":\"l1standardBridge\",\"type\":\"address\"}],\"name\":\"SetL1StandardBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Eth\",\"type\":\"address\"}],\"name\":\"SetL2Eth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2USD\",\"type\":\"address\"}],\"name\":\"SetL2USD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"SetStaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmountWithdrew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmountWithdrew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUSD\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CURVE_DAI_INDEX\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CURVE_USDT_INDEX\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_INITIAL_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_INITIAL_TOKEN_HOLDER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBridge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"}],\"name\":\"claimLidoWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"depositDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositDAIWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stEthAmount\",\"type\":\"uint256\"}],\"name\":\"depositStEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositStEthWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositUSDCWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDAIAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"contract IL1StandardBridge\",\"name\":\"_l1standardBridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1standardBridge\",\"outputs\":[{\"internalType\":\"contract IL1StandardBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2USD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintEthBasedOnStakedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintUSDBasedOnStakedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"requestLidoWithdrawal\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoBridge\",\"type\":\"bool\"}],\"name\":\"setAutoBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoStake\",\"type\":\"bool\"}],\"name\":\"setAutoStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IL1StandardBridge\",\"name\":\"_l1standardBridge\",\"type\":\"address\"}],\"name\":\"setL1StandardBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Eth\",\"type\":\"address\"}],\"name\":\"setL2Eth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2USD\",\"type\":\"address\"}],\"name\":\"setL2USD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"setStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUSDBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUSDBalanceNoUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedEth\",\"outputs\":[{\"internalType\":\"contract WrappedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedUSD\",\"outputs\":[{\"internalType\":\"contract WrappedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"depositDAI(address,uint256)\":{\"params\":{\"daiAmount\":\"Amount to deposit in DAI (wad)\",\"to\":\"Address to mint wrapped tokens to\"}},\"depositDAIWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"daiAmount\":\"Amount to deposit in DAI (wad)\",\"expiry\":\"Permit signature expiry timestamp\",\"nonce\":\"Permit signature nonce\",\"r\":\"Permit signature r parameter\",\"s\":\"Permit signature s parameter\",\"v\":\"Permit signature v parameter\"}},\"depositEth(address)\":{\"params\":{\"to\":\"Address to mint wrapped tokens to\"}},\"depositStEth(address,uint256)\":{\"params\":{\"stEthAmount\":\"Amount to deposit in DAI (wad)\",\"to\":\"Address to mint wrapped tokens to\"}},\"depositStEthWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"USDC is converted to DAI using Maker DssPsm\",\"params\":{\"deadline\":\"Permit signature deadline timestamp\",\"r\":\"Permit signature r parameter\",\"s\":\"Permit signature s parameter\",\"stEthAmount\":\"Amount to deposit in USDC (usd)\",\"v\":\"Permit signature v parameter\"}},\"depositUSDC(address,uint256)\":{\"details\":\"USDC is converted to DAI using Maker DssPsm\",\"params\":{\"to\":\"Address to mint wrapped tokens to\",\"usdcAmount\":\"Amount to deposit in USDC (usd)\"}},\"depositUSDCWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"USDC is converted to DAI using Maker DssPsm\",\"params\":{\"deadline\":\"Permit signature deadline timestamp\",\"r\":\"Permit signature r parameter\",\"s\":\"Permit signature s parameter\",\"usdcAmount\":\"Amount to deposit in USDC (usd)\",\"v\":\"Permit signature v parameter\"}},\"depositUSDT(address,uint256,uint256)\":{\"details\":\"USDT is converted to DAI using Maker DssPsm\",\"params\":{\"minDAIAmount\":\"Minimum amount of DAI to receive from the PSM (slippage protection)\",\"to\":\"Address to mint wrapped tokens to\",\"usdtAmount\":\"Amount to deposit in USDT (usd)\"}},\"mintEthBasedOnStakedAmount(address,uint256)\":{\"details\":\"The owner can only mint up to the amount of ETH deposited + ETH staking rewards from Lido\",\"params\":{\"amount\":\"Amount of wrapped tokens to mint\",\"to\":\"Address to mint wrapped tokens to\"}},\"mintUSDBasedOnStakedAmount(address,uint256)\":{\"details\":\"The owner can only mint up to the amount of USD deposited + USD staking rewards from the Maker DSR\",\"params\":{\"amount\":\"Amount of wrapped tokens to mint\",\"to\":\"Address to mint wrapped tokens to\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAutoBridge(bool)\":{\"params\":{\"_autoBridge\":\"True to pause autobridging, false to unpause\"}},\"setL1StandardBridge(address)\":{\"params\":{\"_l1standardBridge\":\"Address of the L1StandardBridge contract\"}},\"setL2Eth(address)\":{\"params\":{\"_l2Eth\":\"Address of the L2 Wrapped Eth contract\"}},\"setL2USD(address)\":{\"params\":{\"_l2USD\":\"Address of the L2 Wrapped USD contract\"}},\"setStaker(address)\":{\"details\":\"The staker can manually stake ETH into Lido and DAI into the Maker DSR They can also toggle the autostaking of funds. We always want a bit of ETH and DAI unstaked so users can instantly withdraw funds without waiting for the lido withdrawal period.\",\"params\":{\"_staker\":\"Address of the new staker\"}},\"totalETHBalance()\":{\"returns\":{\"_0\":\"Pooled ETH balance between buffered balance and deposited Lido balance\"}},\"totalUSDBalance()\":{\"returns\":{\"_0\":\"Pooled USD balance between buffered balance and deposited DSR balance\"}},\"totalUSDBalanceNoUpdate()\":{\"details\":\"Does not update DSR yield\",\"returns\":{\"_0\":\"Pooled USD balance between buffered balance and deposited DSR balance\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawEth(address,uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"to\":\"Address to withdraw Eth to\"}},\"withdrawStEth(address,uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"to\":\"Address to withdraw Eth to\"}},\"withdrawUSD(address,uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"to\":\"Address to withdraw dai to\"}}},\"title\":\"EdgelessDeposit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositDAI(address,uint256)\":{\"notice\":\"Deposit DAI, mint wrapped tokens, and bridge to the Edgeless L2\"},\"depositDAIWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit DAI to the USD pool with a permit signature\"},\"depositEth(address)\":{\"notice\":\"Deposit ETH, mint wrapped tokens, and bridge to the Edgeless L2\"},\"depositStEth(address,uint256)\":{\"notice\":\"Deposit stEth, mint wrapped tokens, and bridge to the Edgeless L2\"},\"depositStEthWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit STETH with a permit signature\"},\"depositUSDC(address,uint256)\":{\"notice\":\"Deposit USDC, mint wrapped tokens, and bridge to the Edgeless L2\"},\"depositUSDCWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit USDC to the USD pool with a permit signature\"},\"depositUSDT(address,uint256,uint256)\":{\"notice\":\"Deposit USDT, mint wrapped tokens, and bridge to the Edgeless L2\"},\"mintEthBasedOnStakedAmount(address,uint256)\":{\"notice\":\"Mint wrapped tokens based on the amount of ETH staked\"},\"mintUSDBasedOnStakedAmount(address,uint256)\":{\"notice\":\"Mint wrapped tokens based on the amount of USD staked\"},\"setAutoBridge(bool)\":{\"notice\":\"Pause autobridging of wrapped tokens to the Edgeless L2\"},\"setAutoStake(bool)\":{\"notice\":\"Set autoStake to true so all deposits sent to this contract will be staked.\"},\"setL1StandardBridge(address)\":{\"notice\":\"Set the address of the L1StandardBridge contract\"},\"setL2Eth(address)\":{\"notice\":\"Set the address of the L2 Wrapped Eth contract\"},\"setL2USD(address)\":{\"notice\":\"Set the address of the L2 Wrapped USD contract\"},\"setStaker(address)\":{\"notice\":\"Set the address of staker\"},\"stakeDAI(uint256)\":{\"notice\":\"The staker can manually stake `amount` of DAI into the Maker DSR\"},\"stakeETH(uint256)\":{\"notice\":\"The staker can manually stake `amount` of ETH into Lido\"},\"totalETHBalance()\":{\"notice\":\"Get the current ETH pool balance\"},\"totalUSDBalance()\":{\"notice\":\"Get the current USD pool balance\"},\"totalUSDBalanceNoUpdate()\":{\"notice\":\"Get the current USD pool balance\"},\"withdrawEth(address,uint256)\":{\"notice\":\"Withdraw Eth from the ETH pool\"},\"withdrawStEth(address,uint256)\":{\"notice\":\"Withdraw StEth from the ETH pool\"},\"withdrawUSD(address,uint256)\":{\"notice\":\"Withdraw dai from the stablecoin pool\"}},\"notice\":\"EdgelessDeposit is a contract that allows users to deposit ETH, USDC, USDT, or DAI and receive wrapped tokens in return. The wrapped tokens can be used to bridge to the Edgeless L2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/EdgelessDeposit.sol\":\"EdgelessDeposit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ffb56bcb175984a10b1167e2eba560876bfe96a435f5d62ffed8b1bb4ebc4c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"src/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { IDAI } from \\\"./interfaces/IDAI.sol\\\";\\nimport { ILido } from \\\"./interfaces/ILido.sol\\\";\\nimport { IUSDT } from \\\"./interfaces/IUSDT.sol\\\";\\nimport { IUSDC } from \\\"./interfaces/IUSDC.sol\\\";\\nimport { ICurve3Pool } from \\\"./interfaces/ICurve3Pool.sol\\\";\\nimport { IDssPsm } from \\\"./interfaces/IDssPsm.sol\\\";\\nimport { IDsrManager } from \\\"./interfaces/IDsrManager.sol\\\";\\nimport { IWithdrawalQueueERC721 } from \\\"./interfaces/IWithdrawalQueueERC721.sol\\\";\\n\\n// Ethereum Constants\\nIDAI constant DAI = IDAI(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\nILido constant LIDO = ILido(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\nIUSDC constant USDC = IUSDC(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\nIUSDT constant USDT = IUSDT(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n\\nICurve3Pool constant CURVE_3POOL = ICurve3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\nIDssPsm constant PSM = IDssPsm(0x89B78CfA322F6C5dE0aBcEecab66Aee45393cC5A);\\n\\nIDsrManager constant DSR_MANAGER = IDsrManager(0x373238337Bfe1146fb49989fc222523f83081dDb);\\nIWithdrawalQueueERC721 constant LIDO_WITHDRAWAL_ERC721 =\\n    IWithdrawalQueueERC721(0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1);\\n\\n// Ethereum Goerli Constants\\n// IDAI constant DAI = IDAI(0x11fE4B6AE13d2a6055C8D9cF65c55bac32B5d844);\\n// ILido constant LIDO = ILido(0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F);\\n// IUSDC constant USDC = IUSDC(0x6Fb5ef893d44F4f88026430d82d4ef269543cB23);\\n// IUSDT constant USDT = IUSDT(0x5858f25cc225525A7494f76d90A6549749b3030B); // need to be tradeable for dai on curve\\n\\n// ICurve3Pool constant CURVE_3POOL = ICurve3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7); // Unfortunately, curve is not supported on goerli, thus, USDT deposits are not supported\\n// IDssPsm constant PSM = IDssPsm(0xb480B8dD5A232Cb7B227989Eacda728D1F247dB6);\\n\\n// IDsrManager constant DSR_MANAGER = IDsrManager(0xF7F0de3744C82825D77EdA8ce78f07A916fB6bE7);\\n// IWithdrawalQueueERC721 constant LIDO_WITHDRAWAL_ERC721 =\\n//     IWithdrawalQueueERC721(0xCF117961421cA9e546cD7f50bC73abCdB3039533);\\n\\nuint256 constant _RAY = 10 ** 27;\\n\",\"keccak256\":\"0x62626632cc5aa594533c2f3f44b4e1256bfa7662572e61b047a6d0382fd6e966\",\"license\":\"UNLICENSED\"},\"src/DepositManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { DAI, LIDO, USDC, USDT, _RAY, CURVE_3POOL, PSM } from \\\"./Constants.sol\\\";\\nimport { WrappedToken } from \\\"./WrappedToken.sol\\\";\\n\\nimport { MakerMath } from \\\"./lib/MakerMath.sol\\\";\\n\\n/**\\n * @title DepositManager\\n * @notice DepositManager is a library of functions that take in an amount of ETH, USDC, USDT, or\\n * DAI and calculates how much of the corresponding wrapped token to mint.\\n */\\ncontract DepositManager {\\n    uint256 public constant _BASIS_POINTS = 10_000;\\n    address public constant _INITIAL_TOKEN_HOLDER = 0x000000000000000000000000000000000000dEaD;\\n\\n    int128 public constant _CURVE_DAI_INDEX = 0;\\n    int128 public constant _CURVE_USDT_INDEX = 2;\\n    uint256 public constant _INITIAL_DEPOSIT_AMOUNT = 1000;\\n    uint256 public constant _WAD = 10 ** 18;\\n\\n    error ZeroDeposit();\\n    error InsufficientBalance();\\n\\n    /**\\n     * @notice Deposit Eth to the ETH pool\\n     * @dev Amount is msg.value\\n     * @return mintAmount Amount of wrapped tokens to mint\\n     */\\n    function _depositEth(uint256 amount) internal pure returns (uint256 mintAmount) {\\n        if (amount == 0) {\\n            revert ZeroDeposit();\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Swaps USDC for DAI\\n     * @dev USDC is converted to DAI using Maker PSM\\n     * @param usdcAmount Amount of USDC deposited for swapping\\n     * @return mintAmount Amount of wrapped tokens to mint\\n     */\\n    function _depositUSDC(uint256 usdcAmount) internal returns (uint256 mintAmount) {\\n        if (usdcAmount == 0) {\\n            revert ZeroDeposit();\\n        }\\n        uint256 wadAmount = MakerMath.usdToWad(usdcAmount);\\n        uint256 conversionFee = PSM.tin() * wadAmount / _WAD;\\n        mintAmount = wadAmount - conversionFee;\\n\\n        USDC.transferFrom(msg.sender, address(this), usdcAmount);\\n\\n        /* Convert USDC to DAI through MakerDAO Peg Stability Mechanism. */\\n        USDC.approve(PSM.gemJoin(), usdcAmount);\\n        PSM.sellGem(address(this), usdcAmount);\\n    }\\n\\n    /**\\n     * @notice Swaps USDT for DAI\\n     * @dev USDT is converted to DAI using Curve 3Pool\\n     * @param usdtAmount Amount of USDT deposited for swapping\\n     * @param minDAIAmount Minimum DAI amount to accept when exchanging through Curve (wad)\\n     * @return mintAmount Amount of wrapped tokens to mint\\n     */\\n    function _depositUSDT(uint256 usdtAmount, uint256 minDAIAmount) internal returns (uint256 mintAmount) {\\n        if (usdtAmount == 0) {\\n            revert ZeroDeposit();\\n        }\\n\\n        uint256 usdtBalance = USDT.balanceOf(address(this));\\n        USDT.transferFrom(msg.sender, address(this), usdtAmount);\\n        uint256 receivedUSDT = USDT.balanceOf(address(this)) - usdtBalance;\\n\\n        /* Exchange USDT to DAI through the Curve 3Pool. */\\n        uint256 daiBalance = DAI.balanceOf(address(this));\\n        USDT.approve(address(CURVE_3POOL), receivedUSDT);\\n        CURVE_3POOL.exchange(_CURVE_USDT_INDEX, _CURVE_DAI_INDEX, receivedUSDT, minDAIAmount);\\n\\n        /* The amount of DAI received in the exchange is uncertain due to slippage, so we must record the deposit after\\n        the exchange. */\\n        mintAmount = DAI.balanceOf(address(this)) - daiBalance;\\n    }\\n\\n    /**\\n     * @notice Transfer DAI from the depositor to this contract\\n     * @param daiAmount Amount to deposit in DAI (wad)\\n     * @return mintAmount Amount of wrapped tokens to mint\\n     */\\n    function _depositDAI(uint256 daiAmount) internal returns (uint256 mintAmount) {\\n        if (daiAmount == 0) {\\n            revert ZeroDeposit();\\n        }\\n        DAI.transferFrom(msg.sender, address(this), daiAmount);\\n        return daiAmount;\\n    }\\n\\n    /**\\n     * @notice Transfer StEth from the depositor to this contract\\n     * @param stEthAmount Amount to deposit in StEth\\n     * @return mintAmount Amount of wrapped tokens to mint\\n     */\\n    function _depositStEth(uint256 stEthAmount) internal returns (uint256 mintAmount) {\\n        if (stEthAmount == 0) {\\n            revert ZeroDeposit();\\n        }\\n        LIDO.transferFrom(msg.sender, address(this), stEthAmount);\\n        return stEthAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xd8de4bfa735fb13569de4f6dd9e7976a33694e08d86833235238fb4905cc6048\",\"license\":\"UNLICENSED\"},\"src/EdgelessDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { DAI, LIDO, USDC, USDT, DSR_MANAGER, LIDO_WITHDRAWAL_ERC721 } from \\\"./Constants.sol\\\";\\n\\nimport { DepositManager } from \\\"./DepositManager.sol\\\";\\nimport { StakingManager } from \\\"./StakingManager.sol\\\";\\nimport { WrappedToken } from \\\"./WrappedToken.sol\\\";\\n\\nimport { IL1StandardBridge } from \\\"./interfaces/IL1StandardBridge.sol\\\";\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n * @title EdgelessDeposit\\n * @notice EdgelessDeposit is a contract that allows users to deposit ETH, USDC, USDT, or DAI and\\n * receive wrapped tokens in return. The wrapped tokens can be used to bridge to the Edgeless L2\\n */\\ncontract EdgelessDeposit is DepositManager, OwnableUpgradeable, StakingManager, UUPSUpgradeable {\\n    bool public autoBridge;\\n    address public l2ETH;\\n    address public l2USD;\\n    WrappedToken public wrappedEth;\\n    WrappedToken public wrappedUSD;\\n    IL1StandardBridge public l1standardBridge;\\n\\n    event DepositDAI(address indexed to, address indexed from, uint256 daiAmount, uint256 mintAmount);\\n    event DepositEth(address indexed to, address indexed from, uint256 ethAmount, uint256 mintAmount);\\n    event DepositStEth(address indexed to, address indexed from, uint256 usdtAmount, uint256 mintAmount);\\n    event DepositUSDC(address indexed to, address indexed from, uint256 usdcAmount, uint256 mintAmount);\\n    event DepositUSDT(address indexed to, address indexed from, uint256 usdtAmount, uint256 mintAmount);\\n    event MintWrappedETH(address indexed to, uint256 amount);\\n    event MintWrappedUSD(address indexed to, uint256 amount);\\n    event RecievedLidoWithdrawal(uint256 amount);\\n    event SetAutoBridge(bool autoBridge);\\n    event SetL1StandardBridge(IL1StandardBridge l1standardBridge);\\n    event SetL2Eth(address l2Eth);\\n    event SetL2USD(address l2USD);\\n    event WithdrawEth(address indexed from, address indexed to, uint256 ethAmountWithdrew, uint256 burnAmount);\\n    event WithdrawUSD(address indexed from, address indexed to, uint256 usdAmountWithdrew, uint256 burnAmount);\\n\\n    error MaxMintExceeded();\\n    error TransferFailed(bytes data);\\n    error ZeroAddress();\\n    error L2EthSet();\\n    error L2USDSet();\\n\\n    function initialize(address _owner, address _staker, IL1StandardBridge _l1standardBridge) external initializer {\\n        if (address(_l1standardBridge) == address(0) || _owner == address(0) || _staker == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        wrappedEth = new WrappedToken(address(this), \\\"Edgeless Wrapped ETH\\\", \\\"ewETH\\\");\\n        wrappedUSD = new WrappedToken(address(this), \\\"Edgeless Wrapped USD\\\", \\\"ewUSD\\\");\\n        l1standardBridge = _l1standardBridge;\\n        autoBridge = false;\\n        _setAutoStake(false);\\n        _setStaker(_staker);\\n        __Ownable_init(_owner);\\n    }\\n\\n    /// -------------------------------- \\ud83d\\udcdd External Functions \\ud83d\\udcdd --------------------------------\\n    receive() external payable {\\n        if (msg.sender == address(LIDO_WITHDRAWAL_ERC721)) {\\n            emit RecievedLidoWithdrawal(msg.value);\\n        } else {\\n            depositEth(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit ETH, mint wrapped tokens, and bridge to the Edgeless L2\\n     * @param to Address to mint wrapped tokens to\\n     */\\n    function depositEth(address to) public payable {\\n        uint256 amount = _depositEth(msg.value);\\n        _mintAndStakeEth(to, amount);\\n        _bridgeToL2(wrappedEth, l2ETH, to, amount);\\n        emit DepositEth(to, msg.sender, msg.value, amount);\\n    }\\n\\n    /**\\n     * @notice Deposit stEth, mint wrapped tokens, and bridge to the Edgeless L2\\n     * @param to Address to mint wrapped tokens to\\n     * @param stEthAmount Amount to deposit in DAI (wad)\\n     */\\n    function depositStEth(address to, uint256 stEthAmount) public {\\n        uint256 mintAmount = _depositStEth(stEthAmount);\\n        // Don't stake stEth, just mint wrapped tokens\\n        wrappedEth.mint(to, stEthAmount);\\n        _bridgeToL2(wrappedEth, l2ETH, to, mintAmount);\\n        emit DepositStEth(to, msg.sender, stEthAmount, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Deposit USDC, mint wrapped tokens, and bridge to the Edgeless L2\\n     * @dev USDC is converted to DAI using Maker DssPsm\\n     * @param to Address to mint wrapped tokens to\\n     * @param usdcAmount Amount to deposit in USDC (usd)\\n     */\\n    function depositUSDC(address to, uint256 usdcAmount) public {\\n        uint256 mintAmount = _depositUSDC(usdcAmount);\\n        _mintAndStakeUSD(to, mintAmount);\\n        _bridgeToL2(wrappedUSD, l2USD, to, mintAmount);\\n        emit DepositUSDC(to, msg.sender, usdcAmount, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Deposit USDT, mint wrapped tokens, and bridge to the Edgeless L2\\n     * @dev USDT is converted to DAI using Maker DssPsm\\n     * @param to Address to mint wrapped tokens to\\n     * @param usdtAmount Amount to deposit in USDT (usd)\\n     * @param minDAIAmount Minimum amount of DAI to receive from the PSM (slippage protection)\\n     */\\n    function depositUSDT(address to, uint256 usdtAmount, uint256 minDAIAmount) public {\\n        uint256 mintAmount = _depositUSDT(usdtAmount, minDAIAmount);\\n        _mintAndStakeUSD(to, mintAmount);\\n        _bridgeToL2(wrappedUSD, l2USD, to, mintAmount);\\n        emit DepositUSDT(to, msg.sender, usdtAmount, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Deposit DAI, mint wrapped tokens, and bridge to the Edgeless L2\\n     * @param to Address to mint wrapped tokens to\\n     * @param daiAmount Amount to deposit in DAI (wad)\\n     */\\n    function depositDAI(address to, uint256 daiAmount) public {\\n        uint256 mintAmount = _depositDAI(daiAmount);\\n        _mintAndStakeUSD(to, mintAmount);\\n        _bridgeToL2(wrappedUSD, l2USD, to, mintAmount);\\n        emit DepositDAI(to, msg.sender, daiAmount, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Deposit USDC to the USD pool with a permit signature\\n     * @dev USDC is converted to DAI using Maker DssPsm\\n     * @param usdcAmount Amount to deposit in USDC (usd)\\n     * @param deadline Permit signature deadline timestamp\\n     * @param v Permit signature v parameter\\n     * @param r Permit signature r parameter\\n     * @param s Permit signature s parameter\\n     */\\n    function depositUSDCWithPermit(\\n        address to,\\n        uint256 usdcAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n    {\\n        USDC.permit(msg.sender, address(this), usdcAmount, deadline, v, r, s);\\n        depositUSDC(to, usdcAmount);\\n    }\\n\\n    /**\\n     * @notice Deposit STETH with a permit signature\\n     * @dev USDC is converted to DAI using Maker DssPsm\\n     * @param stEthAmount Amount to deposit in USDC (usd)\\n     * @param deadline Permit signature deadline timestamp\\n     * @param v Permit signature v parameter\\n     * @param r Permit signature r parameter\\n     * @param s Permit signature s parameter\\n     */\\n    function depositStEthWithPermit(\\n        address to,\\n        uint256 stEthAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n    {\\n        LIDO.permit(msg.sender, address(this), stEthAmount, deadline, v, r, s);\\n        depositStEth(to, stEthAmount);\\n    }\\n\\n    /**\\n     * @notice Deposit DAI to the USD pool with a permit signature\\n     * @param daiAmount Amount to deposit in DAI (wad)\\n     * @param nonce Permit signature nonce\\n     * @param expiry Permit signature expiry timestamp\\n     * @param v Permit signature v parameter\\n     * @param r Permit signature r parameter\\n     * @param s Permit signature s parameter\\n     */\\n    function depositDAIWithPermit(\\n        address to,\\n        uint256 daiAmount,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n    {\\n        DAI.permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\\n        depositDAI(to, daiAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw Eth from the ETH pool\\n     * @param to Address to withdraw Eth to\\n     * @param amount  Amount to withdraw\\n     */\\n    function withdrawEth(address to, uint256 amount) external {\\n        wrappedEth.burn(msg.sender, amount);\\n        (bool success, bytes memory data) = to.call{ value: amount }(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed(data);\\n        }\\n        emit WithdrawEth(msg.sender, to, amount, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw StEth from the ETH pool\\n     * @param to Address to withdraw Eth to\\n     * @param amount  Amount to withdraw\\n     */\\n    function withdrawStEth(address to, uint256 amount) external {\\n        wrappedEth.burn(msg.sender, amount);\\n        LIDO.transfer(to, amount);\\n        emit WithdrawEth(msg.sender, to, amount, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw dai from the stablecoin pool\\n     * @param to Address to withdraw dai to\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawUSD(address to, uint256 amount) external {\\n        wrappedUSD.burn(msg.sender, amount);\\n        DSR_MANAGER.exit(to, amount);\\n        emit WithdrawUSD(msg.sender, to, amount, amount);\\n    }\\n\\n    /// ---------------------------------- \\ud83d\\udd13 Admin Functions \\ud83d\\udd13 ----------------------------------\\n    /**\\n     * @notice Set the address of the L1StandardBridge contract\\n     * @param _l1standardBridge Address of the L1StandardBridge contract\\n     */\\n    function setL1StandardBridge(IL1StandardBridge _l1standardBridge) external onlyOwner {\\n        if (address(_l1standardBridge) == address(0)) revert ZeroAddress();\\n        l1standardBridge = _l1standardBridge;\\n        emit SetL1StandardBridge(_l1standardBridge);\\n    }\\n\\n    /**\\n     * @notice Set the address of the L2 Wrapped Eth contract\\n     * @param _l2Eth Address of the L2 Wrapped Eth contract\\n     */\\n    function setL2Eth(address _l2Eth) external onlyOwner {\\n        if (address(_l2Eth) == address(0)) revert ZeroAddress();\\n        if (l2ETH != address(0)) revert L2EthSet();\\n        l2ETH = _l2Eth;\\n        emit SetL2Eth(_l2Eth);\\n    }\\n\\n    /**\\n     * @notice Set the address of the L2 Wrapped USD contract\\n     * @param _l2USD Address of the L2 Wrapped USD contract\\n     */\\n    function setL2USD(address _l2USD) external onlyOwner {\\n        if (address(_l2USD) == address(0)) revert ZeroAddress();\\n        if (l2USD != address(0)) revert L2USDSet();\\n        l2USD = _l2USD;\\n        emit SetL2USD(_l2USD);\\n    }\\n\\n    /**\\n     * @notice Set the address of staker\\n     * @dev The staker can manually stake ETH into Lido and DAI into the Maker DSR\\n     * They can also toggle the autostaking of funds. We always want a bit of ETH and DAI\\n     * unstaked so users can instantly withdraw funds without waiting for the lido withdrawal period.\\n     * @param _staker Address of the new staker\\n     */\\n    function setStaker(address _staker) external override onlyOwner {\\n        if (_staker == address(0)) revert ZeroAddress();\\n        _setStaker(_staker);\\n    }\\n\\n    /**\\n     * @notice Pause autobridging of wrapped tokens to the Edgeless L2\\n     * @param _autoBridge True to pause autobridging, false to unpause\\n     */\\n    function setAutoBridge(bool _autoBridge) external onlyOwner {\\n        autoBridge = _autoBridge;\\n        emit SetAutoBridge(_autoBridge);\\n    }\\n\\n    /**\\n     * @notice Mint wrapped tokens based on the amount of ETH staked\\n     * @dev The owner can only mint up to the amount of ETH deposited + ETH staking rewards from Lido\\n     * @param to Address to mint wrapped tokens to\\n     * @param amount Amount of wrapped tokens to mint\\n     */\\n    function mintEthBasedOnStakedAmount(address to, uint256 amount) external onlyOwner {\\n        uint256 maxMint = totalETHBalance() - wrappedEth.totalSupply();\\n        if (maxMint > amount) {\\n            revert MaxMintExceeded();\\n        }\\n        wrappedEth.mint(to, amount);\\n        emit MintWrappedETH(to, amount);\\n    }\\n\\n    /**\\n     * @notice Mint wrapped tokens based on the amount of USD staked\\n     * @dev The owner can only mint up to the amount of USD deposited + USD staking rewards from the Maker DSR\\n     * @param to Address to mint wrapped tokens to\\n     * @param amount Amount of wrapped tokens to mint\\n     */\\n    function mintUSDBasedOnStakedAmount(address to, uint256 amount) external onlyOwner {\\n        uint256 maxMint = totalUSDBalanceNoUpdate() - wrappedUSD.totalSupply();\\n        if (maxMint > amount) {\\n            revert MaxMintExceeded();\\n        }\\n        wrappedUSD.mint(to, amount);\\n        emit MintWrappedUSD(to, amount);\\n    }\\n\\n    /// -------------------------------- \\ud83c\\udfd7\\ufe0f Internal Functions \\ud83c\\udfd7\\ufe0f --------------------------------\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner { }\\n\\n    function _bridgeToL2(WrappedToken wrappedToken, address l2WrappedToken, address to, uint256 amount) internal {\\n        if (autoBridge) {\\n            wrappedToken.approve(address(l1standardBridge), amount);\\n            l1standardBridge.depositERC20To(address(wrappedToken), l2WrappedToken, to, amount, 0, \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev If autobridge, we mint thhe wrapped token to this contract so we can transfer it from '\\n     * this contract to the l1standardbridge contract. Otherwise, we mint it to the user\\n     */\\n    function _mintAndStakeEth(address to, uint256 amount) internal {\\n        if (autoStake) _stakeETH(amount);\\n        if (autoBridge) {\\n            wrappedEth.mint(address(this), amount);\\n        } else {\\n            wrappedEth.mint(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev If autobridge, we mint thhe wrapped token to this contract so we can transfer it from '\\n     * this contract to the l1standardbridge contract. Otherwise, we mint it to the user\\n     */\\n    function _mintAndStakeUSD(address to, uint256 amount) internal {\\n        if (autoStake) _stakeDAI(amount);\\n        if (autoBridge) {\\n            wrappedUSD.mint(address(this), amount);\\n        } else {\\n            wrappedUSD.mint(to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa4ca24eea4bde62774cac0cfb48e475fa88eba40584b16e5c33fb12b1cc97bc5\",\"license\":\"UNLICENSED\"},\"src/StakingManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { LIDO, DAI, _RAY, DSR_MANAGER, LIDO_WITHDRAWAL_ERC721 } from \\\"./Constants.sol\\\";\\n\\nimport { IPot } from \\\"./interfaces/IPot.sol\\\";\\n\\nimport { MakerMath } from \\\"./lib/MakerMath.sol\\\";\\n\\n/**\\n * @title StakingManager\\n * @notice Manages staking of pooled funds, the goal is to maintain the minimum amount of ETH\\n * and DAI so users can withdraw their funds without delay, while maximizing the staking yield.\\n */\\nabstract contract StakingManager {\\n    bool public autoStake;\\n    address public staker;\\n\\n    event ClaimedLidoWithdrawals(uint256[] requestIds);\\n    event DaiStaked(uint256 amount);\\n    event EthStaked(uint256 amount);\\n    event RequestedLidoWithdrawals(uint256[] requestIds, uint256[] amounts);\\n    event SetAutoStake(bool autoDeposit);\\n    event SetStaker(address staker);\\n\\n    error InsufficientFunds();\\n    error SenderIsNotStaker();\\n\\n    modifier onlyStaker() {\\n        if (msg.sender != staker) revert SenderIsNotStaker();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only the owner of EdgelessDeposit can set the staker address\\n     */\\n    function setStaker(address _staker) external virtual;\\n\\n    function _setStaker(address _staker) internal {\\n        staker = _staker;\\n        emit SetStaker(_staker);\\n    }\\n\\n    /**\\n     * @notice Set autoStake to true so all deposits sent to this contract will be staked.\\n     */\\n    function setAutoStake(bool _autoStake) public onlyStaker {\\n        _setAutoStake(_autoStake);\\n        emit SetAutoStake(_autoStake);\\n    }\\n\\n    function _setAutoStake(bool _autoStake) internal {\\n        autoStake = _autoStake;\\n    }\\n\\n    /**\\n     * @notice The staker can manually stake `amount` of DAI into the Maker DSR\\n     */\\n    function stakeDAI(uint256 amount) external onlyStaker {\\n        _stakeDAI(amount);\\n    }\\n\\n    /**\\n     * @notice The staker can manually stake `amount` of ETH into Lido\\n     */\\n    function stakeETH(uint256 amount) external onlyStaker {\\n        _stakeETH(amount);\\n    }\\n\\n    function requestLidoWithdrawal(uint256[] calldata amount)\\n        external\\n        onlyStaker\\n        returns (uint256[] memory requestIds)\\n    {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < amount.length; i++) {\\n            total += amount[i];\\n        }\\n        LIDO.approve(address(LIDO_WITHDRAWAL_ERC721), total);\\n        requestIds = LIDO_WITHDRAWAL_ERC721.requestWithdrawals(amount, address(this));\\n        emit RequestedLidoWithdrawals(requestIds, amount);\\n    }\\n\\n    function claimLidoWithdrawals(uint256[] calldata requestIds) external onlyStaker {\\n        uint256 lastCheckpointIndex = LIDO_WITHDRAWAL_ERC721.getLastCheckpointIndex();\\n        uint256[] memory _hints = LIDO_WITHDRAWAL_ERC721.findCheckpointHints(requestIds, 1, lastCheckpointIndex);\\n        LIDO_WITHDRAWAL_ERC721.claimWithdrawals(requestIds, _hints);\\n        emit ClaimedLidoWithdrawals(requestIds);\\n    }\\n\\n    /**\\n     * @notice Stake pooled USD funds by depositing DAI into the Maker DSR\\n     * @param amount Amount in DAI to stake (usd)\\n     */\\n    function _stakeDAI(uint256 amount) internal {\\n        if (amount > DAI.balanceOf(address(this))) {\\n            revert InsufficientFunds();\\n        }\\n\\n        DAI.approve(address(DSR_MANAGER), amount);\\n        DSR_MANAGER.join(address(this), amount);\\n        emit DaiStaked(amount);\\n    }\\n\\n    /**\\n     * @notice Stake pooled ETH funds by submiting ETH to Lido\\n     * @param amount Amount in ETH to stake (wad)\\n     */\\n    function _stakeETH(uint256 amount) internal {\\n        if (amount > address(this).balance) {\\n            revert InsufficientFunds();\\n        }\\n        LIDO.submit{ value: amount }(address(0));\\n        emit EthStaked(amount);\\n    }\\n\\n    /**\\n     * @notice Get the current ETH pool balance\\n     * @return Pooled ETH balance between buffered balance and deposited Lido balance\\n     */\\n    function totalETHBalance() public view returns (uint256) {\\n        return address(this).balance + LIDO.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Get the current USD pool balance\\n     * @dev Does not update DSR yield\\n     * @return Pooled USD balance between buffered balance and deposited DSR balance\\n     */\\n    function totalUSDBalanceNoUpdate() public view returns (uint256) {\\n        IPot pot = DSR_MANAGER.pot();\\n        uint256 chi = MakerMath.rmul(MakerMath.rpow(pot.dsr(), block.timestamp - pot.rho(), _RAY), pot.chi());\\n        return DAI.balanceOf(address(this)) + MakerMath.rmul(DSR_MANAGER.pieOf(address(this)), chi);\\n    }\\n\\n    /**\\n     * @notice Get the current USD pool balance\\n     * @return Pooled USD balance between buffered balance and deposited DSR balance\\n     */\\n    function totalUSDBalance() public returns (uint256) {\\n        return DAI.balanceOf(address(this)) + DSR_MANAGER.daiBalance(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4f292ed25b695c9137eb871f6c558fe8ca8de079834ca31ebd589353c4bf5277\",\"license\":\"UNLICENSED\"},\"src/WrappedToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title WrappedToken\\n * @notice This represents the wrapped tokens that are bridged to the Edgeless L2\\n */\\ncontract WrappedToken is ERC20 {\\n    address public minter;\\n\\n    event Mint(address indexed account, uint256 amount);\\n    event Burn(address indexed account, uint256 amount);\\n\\n    error SenderIsNotMinter();\\n\\n    modifier onlyMinter() {\\n        if (msg.sender != minter) {\\n            revert SenderIsNotMinter();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice The owner of WrappedToken is the EdgelessDeposit contract\\n     * @param _minter The address of the minter - this should be the EdgelessDeposit contract\\n     */\\n    constructor(address _minter, string memory name, string memory symbol) ERC20(name, symbol) {\\n        minter = _minter;\\n    }\\n\\n    /**\\n     * @notice Only the EdgelessDeposit contract can mint wrapped tokens\\n     */\\n    function mint(address account, uint256 amount) external onlyMinter {\\n        _mint(account, amount);\\n        emit Mint(account, amount);\\n    }\\n\\n    /**\\n     * @notice Only the EdgelessDeposit contract can burn wrapped tokens\\n     */\\n    function burn(address account, uint256 amount) external onlyMinter {\\n        _burn(account, amount);\\n        emit Burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7a255d958d6d6694fa4614108412c6bb92a4c0e0ee1331fab3b3d190e45c2251\",\"license\":\"UNLICENSED\"},\"src/interfaces/ICurve3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\ninterface ICurve3Pool {\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\n}\\n\",\"keccak256\":\"0x0647fc60f73b40cc71d93ea1bf18b43193f64a953693e48510c737d55eadb441\",\"license\":\"UNLICENSED\"},\"src/interfaces/IDAI.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDAI is IERC20 {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa1f676108c0d97ffcd4be1fc03b289822e8a39648057ff0b9235bc1456b93a07\",\"license\":\"UNLICENSED\"},\"src/interfaces/IDsrManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { IPot } from \\\"./IPot.sol\\\";\\n\\ninterface IDsrManager {\\n    function join(address dst, uint256 wad) external;\\n    function exit(address dst, uint256 wad) external;\\n    function exitAll(address dst) external;\\n    function daiBalance(address usr) external returns (uint256 wad);\\n    function pot() external view returns (IPot);\\n    function pieOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x89b76fcc3c1f200436180b21e69972321336ef25e5d8b02feb1cdfd9993c9d7e\",\"license\":\"UNLICENSED\"},\"src/interfaces/IDssPsm.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\ninterface IDssPsm {\\n    function sellGem(address usr, uint256 gemAmt) external;\\n    function buyGem(address usr, uint256 gemAmt) external;\\n    function dai() external view returns (address);\\n    function gemJoin() external view returns (address);\\n    function tin() external view returns (uint256);\\n    function tout() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x74280a0bb5b8ff9623ffabfa9acedd636942fb4549370eaa45d0c17e14b514c9\",\"license\":\"UNLICENSED\"},\"src/interfaces/IL1StandardBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\ninterface IL1StandardBridge {\\n    /// @notice Deposits some amount of ERC20 tokens into a target account on L2.\\n    /// @param _l1Token     Address of the L1 token being deposited.\\n    /// @param _l2Token     Address of the corresponding token on L2.\\n    /// @param _to          Address of the recipient on L2.\\n    /// @param _amount      Amount of the ERC20 to deposit.\\n    /// @param _minGasLimit Minimum gas limit for the deposit message on L2.\\n    /// @param _extraData   Optional data to forward to L2.\\n    ///                     Data supplied here will not be used to execute any code on L2 and is\\n    ///                     only emitted as extra data for the convenience of off-chain tooling.\\n    function depositERC20To(\\n        address _l1Token,\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes calldata _extraData\\n    )\\n        external;\\n\\n    /// @notice Finalizes a withdrawal of ERC20 tokens from L2.\\n    /// @param _l1Token   Address of the token on L1.\\n    /// @param _l2Token   Address of the corresponding token on L2.\\n    /// @param _from      Address of the withdrawer on L2.\\n    /// @param _to        Address of the recipient on L1.\\n    /// @param _amount    Amount of the ERC20 to withdraw.\\n    /// @param _extraData Optional data forwarded from L2.\\n    function finalizeERC20Withdrawal(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _extraData\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xebc5e69b881f4df6b97ed8ff8dd9cd753ba6b31b1cc871bbfd7181ffbd82c2be\",\"license\":\"UNLICENSED\"},\"src/interfaces/ILido.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface ILido is IERC20, IERC20Permit {\\n    function submit(address referralUser) external payable;\\n}\\n\",\"keccak256\":\"0x78f6189a2cda4cc76c26ab42d3d22eeafc6bd8297187f24a28ae26cd9da499f3\",\"license\":\"UNLICENSED\"},\"src/interfaces/IPot.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\ninterface IPot {\\n    function chi() external view returns (uint256);\\n    function rho() external view returns (uint256);\\n    function dsr() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x43bcd72cdb6a566fcf0848907bd8f93acd64af7700d29a3ffaf26196e843c844\",\"license\":\"UNLICENSED\"},\"src/interfaces/IUSDC.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface IUSDC is IERC20, IERC20Permit {\\n    function transferWithAuthorization(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        bytes32,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0x0725750e101a4f933f0476297086321df23ad7b6241ed9b2fbb633d4e3c41022\",\"license\":\"UNLICENSED\"},\"src/interfaces/IUSDT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\ninterface IUSDT {\\n    function transfer(address to, uint256 amount) external;\\n    function transferFrom(address from, address to, uint256 amount) external;\\n    function approve(address spender, uint256 amount) external;\\n    function basisPointsRate() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5a1f0330e2abf7f423ded53d0695bd36e2ca2fac51cc32babd0bb5d5e66ca884\",\"license\":\"UNLICENSED\"},\"src/interfaces/IWithdrawalQueueERC721.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\n/// @notice output format struct for `_getWithdrawalStatus()` method\\nstruct WithdrawalRequestStatus {\\n    /// @notice stETH token amount that was locked on withdrawal queue for this request\\n    uint256 amountOfStETH;\\n    /// @notice amount of stETH shares locked on withdrawal queue for this request\\n    uint256 amountOfShares;\\n    /// @notice address that can claim or transfer this request\\n    address owner;\\n    /// @notice timestamp of when the request was created, in seconds\\n    uint256 timestamp;\\n    /// @notice true, if request is finalized\\n    bool isFinalized;\\n    /// @notice true, if request is claimed. Request is claimable if (isFinalized && !isClaimed)\\n    bool isClaimed;\\n}\\n\\ninterface IWithdrawalQueueERC721 {\\n    function claimWithdrawals(uint256[] calldata _requestIds, uint256[] calldata _hints) external;\\n    function findCheckpointHints(\\n        uint256[] calldata _requestIds,\\n        uint256 _firstIndex,\\n        uint256 _lastIndex\\n    )\\n        external\\n        view\\n        returns (uint256[] memory hintIds);\\n    function finalize(uint256 _lastRequestIdToBeFinalized, uint256 _maxShareRate) external payable;\\n    function getLastCheckpointIndex() external view returns (uint256);\\n    function getWithdrawalStatus(uint256[] calldata _requestIds)\\n        external\\n        view\\n        returns (WithdrawalRequestStatus[] memory statuses);\\n    function requestWithdrawals(\\n        uint256[] calldata _amounts,\\n        address _owner\\n    )\\n        external\\n        returns (uint256[] memory requestIds);\\n}\\n\",\"keccak256\":\"0xb236c23037ebb3b02f541872fca7ef2190fd5e627a5c6c6e7bc5981fec86e7fc\",\"license\":\"UNLICENSED\"},\"src/lib/MakerMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { _RAY } from \\\"../Constants.sol\\\";\\n\\nlibrary MakerMath {\\n    uint256 public constant _USD_DECIMALS = 6;\\n    uint256 public constant _WAD_DECIMALS = 18;\\n    /**\\n     * @dev Based on _rpow from MakerDAO pot.sol contract\\n     * (https://github.com/makerdao/dss/blob/fa4f6630afb0624d04a003e920b0d71a00331d98/src/pot.sol#L87-L105)\\n     */\\n\\n    function rpow(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 { z := base }\\n                default { z := 0 }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 { z := base }\\n                default { z := x }\\n                let half := div(base, 2) // for rounding.\\n                for { n := div(n, 2) } n { n := div(n, 2) } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) { revert(0, 0) }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) { revert(0, 0) }\\n                    x := div(xxRound, base)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0, 0) }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) { revert(0, 0) }\\n                        z := div(zxRound, base)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Based on _rmul in MakerDAO pot.sol contract\\n     * (https://github.com/makerdao/dss/blob/fa4f6630afb0624d04a003e920b0d71a00331d98/src/pot.sol#L109-L111)\\n     */\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y / _RAY;\\n    }\\n\\n    /**\\n     * @notice Convert from USD (6 decimals) to wad (18 decimals) denomination\\n     * @param usd Amount in USD\\n     * @return Amount in wad\\n     */\\n    function usdToWad(uint256 usd) internal pure returns (uint256) {\\n        return usd * (10 ** (_WAD_DECIMALS - _USD_DECIMALS));\\n    }\\n}\\n\",\"keccak256\":\"0x084e91ba313f524192135f26dbe662fac9aab1e304d916164d065e2e3c11d614\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051614bee61003e600039600081816126ae015281816126d801526128250152614bee6000f3fe6080604052600436106200024c5760003560e01c8063032c36c414620002b657806303373ee514620002f057806310406a3514620003175780631a66371a146200033c5780631b9a91a414620003545780631d212c9614620003795780632bb33bbe146200039e57806335fac3b114620003c35780633ec97e1d14620003db5780634789badd14620003f35780634e1d184014620004205780634f1ef286146200044557806352d1902d146200045c578063555a23bb146200047457806356b22bf214620004995780635ebaf1db14620004be57806364aab23914620004e557806368ca883a146200050a5780636c9fb45d146200052c5780636cf510da14620005575780636ecc20da1462000579578063715018a6146200059e57806379408c4314620005b65780637d46b0af14620005ce5780638850aa4614620006025780638aba131714620006275780638da5cb5b146200064a5780638e472433146200066257806391f80f801462000687578063a29a43bb14620006a9578063a3fc73cd14620006ce578063a44098e114620006f3578063ad3cb1cc1462000715578063ad9d4ba31462000757578063b5063588146200076e578063b853c8cc1462000793578063b8d120f014620007b8578063bb7ea01914620007dd578063c057e2491462000802578063c0c53b8b1462000827578063d252ea25146200084c578063df6e69731462000863578063e02f64f21462000888578063ee62ef6c14620008ad578063f02bb2f414620008cb578063f2fde38b14620008f0578063fef2acae146200091557600080fd5b36620002b15773889edc2edab5f40e902b864ad4d7ade8e412f9b0193301620002a4576040513481527f78c2c7732c04afe7a845fba707807efa67ff5532e94fda81f42bc62a80a9f8439060200160405180910390a1005b620002af336200092d565b005b600080fd5b348015620002c357600080fd5b50600454620002d8906001600160a01b031681565b604051620002e7919062003697565b60405180910390f35b348015620002fd57600080fd5b50620003086103e881565b604051908152602001620002e7565b3480156200032457600080fd5b50620002af62000336366004620036c1565b620009bb565b3480156200034957600080fd5b506200030862000ad8565b3480156200036157600080fd5b50620002af62000373366004620036c1565b62000dca565b3480156200038657600080fd5b50620002af62000398366004620036ff565b62000efc565b348015620003ab57600080fd5b50620002af620003bd366004620036c1565b62000f71565b348015620003d057600080fd5b506200030861271081565b348015620003e857600080fd5b50620002d861dead81565b3480156200040057600080fd5b506000546200040f9060ff1681565b6040519015158152602001620002e7565b3480156200042d57600080fd5b50620002af6200043f3660046200371f565b620010d7565b620002af62000456366004620037e1565b620012c6565b3480156200046957600080fd5b5062000308620012eb565b3480156200048157600080fd5b50620002af62000493366004620036ff565b6200130b565b348015620004a657600080fd5b50620002af620004b8366004620036c1565b62001363565b348015620004cb57600080fd5b50600054620002d89061010090046001600160a01b031681565b348015620004f257600080fd5b50620002af6200050436600462003893565b620013f2565b3480156200051757600080fd5b50600354620002d8906001600160a01b031681565b3480156200053957600080fd5b5062000543600281565b604051600f9190910b8152602001620002e7565b3480156200056457600080fd5b50600554620002d8906001600160a01b031681565b3480156200058657600080fd5b50620002af6200059836600462003893565b62001431565b348015620005ab57600080fd5b50620002af6200146d565b348015620005c357600080fd5b506200030862001485565b348015620005db57600080fd5b50620005f3620005ed3660046200371f565b62001590565b604051620002e79190620038eb565b3480156200060f57600080fd5b50620002af62000621366004620036c1565b62001769565b3480156200063457600080fd5b506000546200040f90600160a81b900460ff1681565b3480156200065757600080fd5b50620002d862001846565b3480156200066f57600080fd5b50620002af6200068136600462003917565b62001863565b3480156200069457600080fd5b50600154620002d8906001600160a01b031681565b348015620006b657600080fd5b50620002af620006c836600462003976565b620018f0565b348015620006db57600080fd5b50620002af620006ed36600462003917565b6200192d565b3480156200070057600080fd5b50600254620002d8906001600160a01b031681565b3480156200072257600080fd5b5062000748604051806040016040528060058152602001640352e302e360dc1b81525081565b604051620002e79190620039ea565b620002af6200076836600462003976565b6200092d565b3480156200077b57600080fd5b50620002af6200078d366004620039ff565b620019b2565b348015620007a057600080fd5b50620002af620007b2366004620036c1565b62001a35565b348015620007c557600080fd5b50620002af620007d736600462003a37565b62001ab7565b348015620007ea57600080fd5b50620002af620007fc36600462003976565b62001b60565b3480156200080f57600080fd5b50620002af6200082136600462003976565b62001bdf565b3480156200083457600080fd5b50620002af6200084636600462003aa1565b62001c89565b3480156200085957600080fd5b5062000543600081565b3480156200087057600080fd5b50620002af62000882366004620036c1565b62001f5d565b3480156200089557600080fd5b50620002af620008a7366004620036c1565b6200207d565b348015620008ba57600080fd5b5062000308670de0b6b3a764000081565b348015620008d857600080fd5b50620002af620008ea36600462003976565b620021e0565b348015620008fd57600080fd5b50620002af6200090f36600462003976565b6200228a565b3480156200092257600080fd5b5062000308620022cc565b60006200093a3462002358565b905062000948828262002380565b60035460015462000968916001600160a01b039081169116848462002442565b336001600160a01b0316826001600160a01b03167f5e7e61836e7aac688d4f66257806e3118cc7a380422ee384512b7812e53cd1aa3484604051620009af92919062003af3565b60405180910390a35050565b60048054604051632770a7eb60e21b81526001600160a01b0390911691639dc29fac91620009ee91339186910162003b01565b600060405180830381600087803b15801562000a0957600080fd5b505af115801562000a1e573d6000803e3d6000fd5b505060405163ef693bed60e01b815273373238337bfe1146fb49989fc222523f83081ddb925063ef693bed915062000a5d908590859060040162003b01565b600060405180830381600087803b15801562000a7857600080fd5b505af115801562000a8d573d6000803e3d6000fd5b50505050816001600160a01b0316336001600160a01b03167fad3c54c4fffd720f5ea7bdf12784fb570c90a5cc66326f2e78cdd9dc3a210db08384604051620009af92919062003af3565b60008073373238337bfe1146fb49989fc222523f83081ddb6001600160a01b0316634ba2363a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b2e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b54919062003b1a565b9050600062000cb362000c48836001600160a01b031663487bf0826040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bc5919062003b3a565b846001600160a01b03166320aba08b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c2a919062003b3a565b62000c36904262003b6a565b676765c793fa10079d601b1b62002561565b836001600160a01b031663c92aecc46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c87573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cad919062003b3a565b6200262c565b6040516388787f2b60e01b815290915062000d3f9073373238337bfe1146fb49989fc222523f83081ddb906388787f2b9062000cf490309060040162003697565b602060405180830381865afa15801562000d12573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d38919062003b3a565b826200262c565b6040516370a0823160e01b815260008051602062004b59833981519152906370a082319062000d7390309060040162003697565b602060405180830381865afa15801562000d91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000db7919062003b3a565b62000dc3919062003b80565b9250505090565b600354604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9062000dfe903390859060040162003b01565b600060405180830381600087803b15801562000e1957600080fd5b505af115801562000e2e573d6000803e3d6000fd5b50505050600080836001600160a01b03168360405160006040518083038185875af1925050503d806000811462000e82576040519150601f19603f3d011682016040523d82523d6000602084013e62000e87565b606091505b50915091508162000eb85780604051639a367e1760e01b815260040162000eaf9190620039ea565b60405180910390fd5b836001600160a01b0316336001600160a01b031660008051602062004b99833981519152858660405162000eee92919062003af3565b60405180910390a350505050565b60005461010090046001600160a01b0316331462000f2d57604051631e31a89f60e21b815260040160405180910390fd5b62000f388162002659565b60405181151581527fc236baa3e21fdc712591cbbebfb2930bae5f479427ab19de579ef52e28680426906020015b60405180910390a150565b62000f7b6200266c565b600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801562000fc6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fec919062003b3a565b62000ff6620022cc565b62001002919062003b6a565b9050818111156200102657604051633ce95f8560e11b815260040160405180910390fd5b6003546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906200105a908690869060040162003b01565b600060405180830381600087803b1580156200107557600080fd5b505af11580156200108a573d6000803e3d6000fd5b50505050826001600160a01b03167fe912b71534193399d2c9c1ec0a0a5fa5f22d77907a892d10365e898978c4842783604051620010ca91815260200190565b60405180910390a2505050565b60005461010090046001600160a01b031633146200110857604051631e31a89f60e21b815260040160405180910390fd5b600073889edc2edab5f40e902b864ad4d7ade8e412f9b16001600160a01b031663526eae3e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200115d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001183919062003b3a565b604051633155f1fd60e11b815290915060009073889edc2edab5f40e902b864ad4d7ade8e412f9b1906362abe3fa90620011c99087908790600190889060040162003bc9565b600060405180830381865afa158015620011e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001211919081019062003bf2565b60405163e3afe0a360e01b815290915073889edc2edab5f40e902b864ad4d7ade8e412f9b19063e3afe0a390620012519087908790869060040162003ca2565b600060405180830381600087803b1580156200126c57600080fd5b505af115801562001281573d6000803e3d6000fd5b505050507f7aee03fd3b4f28038c0a19aae4813d09e881d6334d568d75f13c2147621a14668484604051620012b892919062003ccc565b60405180910390a150505050565b620012d0620026a3565b620012db826200274c565b620012e7828262002756565b5050565b6000620012f76200281a565b5060008051602062004b7983398151915290565b620013156200266c565b60008054821515600160a81b0260ff60a81b199091161790556040517f215a7d64fb51bebc34020eacfcbd22580622c6148ad085a557d7b3c4b850372c9062000f6690831515815260200190565b6000620013708262002864565b90506200137e838262002b42565b6004546002546200139e916001600160a01b039081169116858462002442565b336001600160a01b0316836001600160a01b03167f67046042551d73147aa29767c53a6787176add2c91a452108118bd0fad9c78608484604051620013e592919062003af3565b60405180910390a3505050565b60005461010090046001600160a01b031633146200142357604051631e31a89f60e21b815260040160405180910390fd5b6200142e8162002bd2565b50565b60005461010090046001600160a01b031633146200146257604051631e31a89f60e21b815260040160405180910390fd5b6200142e8162002d9d565b620014776200266c565b62001483600062002e61565b565b60405163d7f7098f60e01b815260009073373238337bfe1146fb49989fc222523f83081ddb9063d7f7098f90620014c190309060040162003697565b6020604051808303816000875af1158015620014e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001507919062003b3a565b6040516370a0823160e01b815260008051602062004b59833981519152906370a08231906200153b90309060040162003697565b602060405180830381865afa15801562001559573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200157f919062003b3a565b6200158b919062003b80565b905090565b60005460609061010090046001600160a01b03163314620015c457604051631e31a89f60e21b815260040160405180910390fd5b6000805b838110156200160557848482818110620015e657620015e662003cea565b9050602002013582620015fa919062003b80565b9150600101620015c8565b5060405163095ea7b360e01b815273ae7ab96520de3a18e5e111b5eaab095312d7fe849063095ea7b390620016559073889edc2edab5f40e902b864ad4d7ade8e412f9b190859060040162003b01565b6020604051808303816000875af115801562001675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200169b919062003d00565b50604051636b34082160e11b815273889edc2edab5f40e902b864ad4d7ade8e412f9b19063d668104290620016d99087908790309060040162003d20565b6000604051808303816000875af1158015620016f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001723919081019062003bf2565b91507f739045819b08e6460066e1a5d4637e55804ab88b0c81458bb5472dbc589717158285856040516200175a9392919062003d4e565b60405180910390a15092915050565b6000620017768262002ebf565b6003546040516340c10f1960e01b81529192506001600160a01b0316906340c10f1990620017ab908690869060040162003b01565b600060405180830381600087803b158015620017c657600080fd5b505af1158015620017db573d6000803e3d6000fd5b5050600354600154620017ff93506001600160a01b03918216925016858462002442565b336001600160a01b0316836001600160a01b03167fbfd9907006e12fdb4699f6e85603e9892fb5757c6042047d8169c4eb1b71ed958484604051620013e592919062003af3565b6000806200185362002f6d565b546001600160a01b031692915050565b60405163d505accf60e01b815273ae7ab96520de3a18e5e111b5eaab095312d7fe849063d505accf90620018a890339030908a908a908a908a908a9060040162003d78565b600060405180830381600087803b158015620018c357600080fd5b505af1158015620018d8573d6000803e3d6000fd5b50505050620018e8868662001769565b505050505050565b620018fa6200266c565b6001600160a01b038116620019225760405163d92e233d60e01b815260040160405180910390fd5b6200142e8162002f91565b60405163d505accf60e01b815273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb489063d505accf906200197290339030908a908a908a908a908a9060040162003d78565b600060405180830381600087803b1580156200198d57600080fd5b505af1158015620019a2573d6000803e3d6000fd5b50505050620018e8868662001363565b6000620019c0838362002fe3565b9050620019ce848262002b42565b600454600254620019ee916001600160a01b039081169116868462002442565b336001600160a01b0316846001600160a01b03167fba1a428b44730bdf399a9671fc82b388a7a4c5e66996f90f7ec91318763f1fd7858460405162000eee92919062003af3565b600062001a428262003399565b905062001a50838262002b42565b60045460025462001a70916001600160a01b039081169116858462002442565b336001600160a01b0316836001600160a01b03167feede33f976b77d678e192513c23c8f35e7726af75e036b9f4d7000c2c410f7268484604051620013e592919062003af3565b6040516323f2ebc360e21b815233600482015230602482015260448101869052606481018590526001608482015260ff841660a482015260c4810183905260e4810182905260008051602062004b5983398151915290638fcbaf0c9061010401600060405180830381600087803b15801562001b3257600080fd5b505af115801562001b47573d6000803e3d6000fd5b5050505062001b57878762001a35565b50505050505050565b62001b6a6200266c565b6001600160a01b03811662001b925760405163d92e233d60e01b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383161790556040517f6bd18dd71dbbe09ce1c748bd59a9d3578fd72f868be620e941baaf7ededc1b2c9062000f6690839062003697565b62001be96200266c565b6001600160a01b03811662001c115760405163d92e233d60e01b815260040160405180910390fd5b6001546001600160a01b03161562001c3c57604051633c89824560e11b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383161790556040517fef378cd64aa039f8aa85e2d1348e2d05fc857350febd6741215907a7176da26b9062000f6690839062003697565b600062001c95620033f5565b805490915060ff600160401b82041615906001600160401b031660008115801562001cbd5750825b90506000826001600160401b0316600114801562001cda5750303b155b90508115801562001ce9575080155b1562001d085760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831562001d3257845460ff60401b1916600160401b1785555b6001600160a01b038616158062001d5057506001600160a01b038816155b8062001d6357506001600160a01b038716155b1562001d825760405163d92e233d60e01b815260040160405180910390fd5b3060405162001d919062003689565b6001600160a01b0390911681526060602082018190526014908201527308ac8cecad8cae6e640aee4c2e0e0cac8408aa8960631b608082015260a060408201819052600590820152640caee8aa8960db1b60c082015260e001604051809103906000f08015801562001e07573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055604051309062001e389062003689565b6001600160a01b03909116815260606020820181905260149082015273115919d95b195cdcc815dc985c1c1959081554d160621b608082015260a06040820181905260059082015264195dd554d160da1b60c082015260e001604051809103906000f08015801562001eae573d6000803e3d6000fd5b50600480546001600160a01b03199081166001600160a01b0393841617909155600580549091169188169190911790556000805460ff60a81b1916815562001ef69062002659565b62001f018762002f91565b62001f0c8862003419565b831562001f5357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600354604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9062001f91903390859060040162003b01565b600060405180830381600087803b15801562001fac57600080fd5b505af115801562001fc1573d6000803e3d6000fd5b505060405163a9059cbb60e01b815273ae7ab96520de3a18e5e111b5eaab095312d7fe84925063a9059cbb915062002000908590859060040162003b01565b6020604051808303816000875af115801562002020573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002046919062003d00565b50816001600160a01b0316336001600160a01b031660008051602062004b998339815191528384604051620009af92919062003af3565b620020876200266c565b6000600460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620020dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002103919062003b3a565b6200210d62000ad8565b62002119919062003b6a565b9050818111156200213d57604051633ce95f8560e11b815260040160405180910390fd5b600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f19916200217091879187910162003b01565b600060405180830381600087803b1580156200218b57600080fd5b505af1158015620021a0573d6000803e3d6000fd5b50505050826001600160a01b03167fff4ccf245d654193481740374c71e8e4d2e48a49d4b6f2e634b3cf202139aab383604051620010ca91815260200190565b620021ea6200266c565b6001600160a01b038116620022125760405163d92e233d60e01b815260040160405180910390fd5b6002546001600160a01b0316156200223d576040516385698c8b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383161790556040517fbdb2fff55a25f4c33d1f97c239c9f34f0978a7fcb2e8761cf32c59c7e6a3352b9062000f6690839062003697565b620022946200266c565b6001600160a01b038116620022c1576000604051631e4fbdf760e01b815260040162000eaf919062003697565b6200142e8162002e61565b6040516370a0823160e01b815260009073ae7ab96520de3a18e5e111b5eaab095312d7fe84906370a08231906200230890309060040162003697565b602060405180830381865afa15801562002326573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200234c919062003b3a565b6200158b904762003b80565b6000816000036200237c576040516356316e8760e01b815260040160405180910390fd5b5090565b60005460ff16156200239757620023978162002d9d565b600054600160a81b900460ff16156200240e576003546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990620023de903090859060040162003b01565b600060405180830381600087803b158015620023f957600080fd5b505af1158015620018e8573d6000803e3d6000fd5b6003546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990620023de908590859060040162003b01565b600054600160a81b900460ff16156200255b5760055460405163095ea7b360e01b81526001600160a01b038681169263095ea7b3926200248b9290911690859060040162003b01565b6020604051808303816000875af1158015620024ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024d1919062003d00565b5060055460405163041c592960e51b81526001600160a01b038681166004830152858116602483015284811660448301526064820184905260006084830181905260c060a484015260c48301529091169063838b25209060e401600060405180830381600087803b1580156200254657600080fd5b505af115801562001f53573d6000803e3d6000fd5b50505050565b60008380156200260c576001841680156200257f5785925062002583565b8392505b50600283046002850494505b841562002605578586028687820414620025a857600080fd5b81810181811015620025b957600080fd5b8590049650506001851615620025f9578583028387820414158715151615620025e157600080fd5b81810181811015620025f257600080fd5b8590049350505b6002850494506200258f565b5062002624565b8380156200261e576000925062002622565b8392505b505b509392505050565b6000676765c793fa10079d601b1b62002646838562003db9565b62002652919062003dd3565b9392505050565b6000805460ff1916911515919091179055565b336200267762001846565b6001600160a01b03161462001483573360405163118cdaa760e01b815260040162000eaf919062003697565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806200272d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200272160008051602062004b79833981519152546001600160a01b031690565b6001600160a01b031614155b15620014835760405163703e46dd60e11b815260040160405180910390fd5b6200142e6200266c565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015620027b3575060408051601f3d908101601f19168201909252620027b09181019062003b3a565b60015b620027d55781604051634c9c8ce360e01b815260040162000eaf919062003697565b60008051602062004b7983398151915281146200280957604051632a87526960e21b81526004810182905260240162000eaf565b6200281583836200342e565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620014835760405163703e46dd60e11b815260040160405180910390fd5b60008160000362002888576040516356316e8760e01b815260040160405180910390fd5b600062002895836200348b565b90506000670de0b6b3a7640000827389b78cfa322f6c5de0abceecab66aee45393cc5a6001600160a01b031663568d4b6f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620028f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200291c919062003b3a565b62002928919062003db9565b62002934919062003dd3565b905062002942818362003b6a565b6040516323b872dd60e01b815290935073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48906323b872dd90620029829033903090899060040162003df6565b6020604051808303816000875af1158015620029a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029c8919062003d00565b5073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486001600160a01b031663095ea7b37389b78cfa322f6c5de0abceecab66aee45393cc5a6001600160a01b03166301664f666040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002a3f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a65919062003b1a565b866040518363ffffffff1660e01b815260040162002a8592919062003b01565b6020604051808303816000875af115801562002aa5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002acb919062003d00565b50604051634acc893b60e11b81527389b78cfa322f6c5de0abceecab66aee45393cc5a9063959912769062002b07903090889060040162003b01565b600060405180830381600087803b15801562002b2257600080fd5b505af115801562002b37573d6000803e3d6000fd5b505050505050919050565b60005460ff161562002b595762002b598162002bd2565b600054600160a81b900460ff161562002b9f57600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f1991620023de91309186910162003b01565b600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f1991620023de91869186910162003b01565b6040516370a0823160e01b815260008051602062004b59833981519152906370a082319062002c0690309060040162003697565b602060405180830381865afa15801562002c24573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002c4a919062003b3a565b81111562002c6b5760405163356680b760e01b815260040160405180910390fd5b60405163095ea7b360e01b815260008051602062004b598339815191529063095ea7b39062002cb59073373238337bfe1146fb49989fc222523f83081ddb90859060040162003b01565b6020604051808303816000875af115801562002cd5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002cfb919062003d00565b50604051633b4da69f60e01b815273373238337bfe1146fb49989fc222523f83081ddb90633b4da69f9062002d37903090859060040162003b01565b600060405180830381600087803b15801562002d5257600080fd5b505af115801562002d67573d6000803e3d6000fd5b505050507f982021fc45e4a9c28ba63e98a2a2e534166e3bcb2ef32e1f120fd754cbb5c7188160405162000f6691815260200190565b4781111562002dbf5760405163356680b760e01b815260040160405180910390fd5b60405163a1903eab60e01b815273ae7ab96520de3a18e5e111b5eaab095312d7fe849063a1903eab90839062002dfb9060009060040162003697565b6000604051808303818588803b15801562002e1557600080fd5b505af115801562002e2a573d6000803e3d6000fd5b50505050507f5ac3d75f987a73cee9a456a277139319eee6559e3d027a360d2fc37ac93e74a38160405162000f6691815260200190565b600062002e6d62002f6d565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60008160000362002ee3576040516356316e8760e01b815260040160405180910390fd5b6040516323b872dd60e01b815273ae7ab96520de3a18e5e111b5eaab095312d7fe84906323b872dd9062002f209033903090879060040162003df6565b6020604051808303816000875af115801562002f40573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f66919062003d00565b5090919050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930090565b60008054610100600160a81b0319166101006001600160a01b038416021790556040517f6901da73a3480b0bbd7deb64f259ff29a76ce811c7a3e5cf495f0e1eb4fb4dfb9062000f6690839062003697565b60008260000362003007576040516356316e8760e01b815260040160405180910390fd5b6040516370a0823160e01b815260009073dac17f958d2ee523a2206206994597c13d831ec7906370a08231906200304390309060040162003697565b602060405180830381865afa15801562003061573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003087919062003b3a565b6040516323b872dd60e01b815290915073dac17f958d2ee523a2206206994597c13d831ec7906323b872dd90620030c79033903090899060040162003df6565b600060405180830381600087803b158015620030e257600080fd5b505af1158015620030f7573d6000803e3d6000fd5b50506040516370a0823160e01b81526000925083915073dac17f958d2ee523a2206206994597c13d831ec7906370a08231906200313990309060040162003697565b602060405180830381865afa15801562003157573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200317d919062003b3a565b62003189919062003b6a565b6040516370a0823160e01b815290915060009060008051602062004b59833981519152906370a0823190620031c390309060040162003697565b602060405180830381865afa158015620031e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003207919062003b3a565b60405163095ea7b360e01b815290915073dac17f958d2ee523a2206206994597c13d831ec79063095ea7b390620032599073bebc44782c7db0a1a60cb6fe97d0b483032ff1c790869060040162003b01565b600060405180830381600087803b1580156200327457600080fd5b505af115801562003289573d6000803e3d6000fd5b5050604051630f7c084960e21b81526002600482015260006024820152604481018590526064810188905273bebc44782c7db0a1a60cb6fe97d0b483032ff1c79250633df021249150608401600060405180830381600087803b158015620032f057600080fd5b505af115801562003305573d6000803e3d6000fd5b50506040516370a0823160e01b815283925060008051602062004b5983398151915291506370a08231906200333f90309060040162003697565b602060405180830381865afa1580156200335d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003383919062003b3a565b6200338f919062003b6a565b9695505050505050565b600081600003620033bd576040516356316e8760e01b815260040160405180910390fd5b6040516323b872dd60e01b815260008051602062004b59833981519152906323b872dd9062002f209033903090879060040162003df6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b62003423620034ba565b6200142e81620034e2565b6200343982620034ec565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511562003481576200281582826200354c565b620012e7620035c8565b60006200349b6006601262003b6a565b620034a890600a62003f17565b620034b4908362003db9565b92915050565b620034c4620035e8565b6200148357604051631afcd79f60e31b815260040160405180910390fd5b62002294620034ba565b806001600160a01b03163b6000036200351c5780604051634c9c8ce360e01b815260040162000eaf919062003697565b60008051602062004b7983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516200356b919062003f25565b600060405180830381855af49150503d8060008114620035a8576040519150601f19603f3d011682016040523d82523d6000602084013e620035ad565b606091505b5091509150620035bf85838362003604565b95945050505050565b3415620014835760405163b398979f60e01b815260040160405180910390fd5b6000620035f4620033f5565b54600160401b900460ff16919050565b6060826200361d5762003617826200365f565b62002652565b81511580156200363557506001600160a01b0384163b155b15620036585783604051639996b31560e01b815260040162000eaf919062003697565b5092915050565b805115620036705780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b610c158062003f4483390190565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146200142e57600080fd5b60008060408385031215620036d557600080fd5b8235620036e281620036ab565b946020939093013593505050565b80151581146200142e57600080fd5b6000602082840312156200371257600080fd5b81356200265281620036f0565b600080602083850312156200373357600080fd5b82356001600160401b03808211156200374b57600080fd5b818501915085601f8301126200376057600080fd5b8135818111156200377057600080fd5b8660208260051b85010111156200378657600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620037d957620037d962003798565b604052919050565b60008060408385031215620037f557600080fd5b82356200380281620036ab565b91506020838101356001600160401b03808211156200382057600080fd5b818601915086601f8301126200383557600080fd5b8135818111156200384a576200384a62003798565b6200385e601f8201601f19168501620037ae565b915080825287848285010111156200387557600080fd5b80848401858401376000848284010152508093505050509250929050565b600060208284031215620038a657600080fd5b5035919050565b60008151808452602080850194506020840160005b83811015620038e057815187529582019590820190600101620038c2565b509495945050505050565b602081526000620026526020830184620038ad565b803560ff811681146200391257600080fd5b919050565b60008060008060008060c087890312156200393157600080fd5b86356200393e81620036ab565b955060208701359450604087013593506200395c6060880162003900565b92506080870135915060a087013590509295509295509295565b6000602082840312156200398957600080fd5b81356200265281620036ab565b60005b83811015620039b357818101518382015260200162003999565b50506000910152565b60008151808452620039d681602086016020860162003996565b601f01601f19169290920160200192915050565b602081526000620026526020830184620039bc565b60008060006060848603121562003a1557600080fd5b833562003a2281620036ab565b95602085013595506040909401359392505050565b600080600080600080600060e0888a03121562003a5357600080fd5b873562003a6081620036ab565b965060208801359550604088013594506060880135935062003a856080890162003900565b925060a0880135915060c0880135905092959891949750929550565b60008060006060848603121562003ab757600080fd5b833562003ac481620036ab565b9250602084013562003ad681620036ab565b9150604084013562003ae881620036ab565b809150509250925092565b918252602082015260400190565b6001600160a01b03929092168252602082015260400190565b60006020828403121562003b2d57600080fd5b81516200265281620036ab565b60006020828403121562003b4d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115620034b457620034b462003b54565b80820180821115620034b457620034b462003b54565b81835260006001600160fb1b0383111562003bb057600080fd5b8260051b80836020870137939093016020019392505050565b60608152600062003bdf60608301868862003b96565b6020830194909452506040015292915050565b6000602080838503121562003c0657600080fd5b82516001600160401b038082111562003c1e57600080fd5b818501915085601f83011262003c3357600080fd5b81518181111562003c485762003c4862003798565b8060051b915062003c5b848301620037ae565b818152918301840191848101908884111562003c7657600080fd5b938501935b8385101562003c965784518252938501939085019062003c7b565b98975050505050505050565b60408152600062003cb860408301858762003b96565b82810360208401526200338f8185620038ad565b60208152600062003ce260208301848662003b96565b949350505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562003d1357600080fd5b81516200265281620036f0565b60408152600062003d3660408301858762003b96565b905060018060a01b0383166020830152949350505050565b60408152600062003d636040830186620038ad565b82810360208401526200338f81858762003b96565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b8082028115828204841417620034b457620034b462003b54565b60008262003df157634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181815b8085111562003e5b57816000190482111562003e3f5762003e3f62003b54565b8085161562003e4d57918102915b93841c939080029062003e1f565b509250929050565b60008262003e7457506001620034b4565b8162003e8357506000620034b4565b816001811462003e9c576002811462003ea75762003ec7565b6001915050620034b4565b60ff84111562003ebb5762003ebb62003b54565b50506001821b620034b4565b5060208310610133831016604e8410600b841016171562003eec575081810a620034b4565b62003ef8838362003e1a565b806000190482111562003f0f5762003f0f62003b54565b029392505050565b600062002652838362003e63565b6000825162003f3981846020870162003996565b919091019291505056fe60806040523480156200001157600080fd5b5060405162000c1538038062000c15833981016040819052620000349162000148565b8181600362000044838262000263565b50600462000053828262000263565b5050600580546001600160a01b0319166001600160a01b039590951694909417909355506200032f915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000a857600080fd5b81516001600160401b0380821115620000c557620000c562000080565b604051601f8301601f19908116603f01168101908282118183101715620000f057620000f062000080565b81604052838152602092508660208588010111156200010e57600080fd5b600091505b8382101562000132578582018301518183018401529082019062000113565b6000602085830101528094505050505092915050565b6000806000606084860312156200015e57600080fd5b83516001600160a01b03811681146200017657600080fd5b60208501519093506001600160401b03808211156200019457600080fd5b620001a28783880162000096565b93506040860151915080821115620001b957600080fd5b50620001c88682870162000096565b9150509250925092565b600181811c90821680620001e757607f821691505b6020821081036200020857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025e576000816000526020600020601f850160051c81016020861015620002395750805b601f850160051c820191505b818110156200025a5782815560010162000245565b5050505b505050565b81516001600160401b038111156200027f576200027f62000080565b6200029781620002908454620001d2565b846200020e565b602080601f831160018114620002cf5760008415620002b65750858301515b600019600386901b1c1916600185901b1785556200025a565b600085815260208120601f198616915b828110156200030057888601518255948401946001909101908401620002df565b50858210156200031f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6108d6806200033f6000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c806306fdde03146100a957806307546172146100c7578063095ea7b3146100e757806318160ddd1461010a57806323b872dd1461011c578063313ce5671461012f57806340c10f191461013e57806370a082311461015357806395d89b411461017c5780639dc29fac14610184578063a9059cbb14610197578063dd62ed3e146101aa575b600080fd5b6100b16101bd565b6040516100be91906106ea565b60405180910390f35b6005546100da906001600160a01b031681565b6040516100be9190610739565b6100fa6100f5366004610769565b61024f565b60405190151581526020016100be565b6002545b6040519081526020016100be565b6100fa61012a366004610793565b610269565b604051601281526020016100be565b61015161014c366004610769565b61028d565b005b61010e6101613660046107cf565b6001600160a01b031660009081526020819052604090205490565b6100b1610309565b610151610192366004610769565b610318565b6100fa6101a5366004610769565b610388565b61010e6101b83660046107f1565b610396565b6060600380546101cc90610824565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610824565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b60003361025d8185856103c1565b60019150505b92915050565b6000336102778582856103d3565b61028285858561042f565b506001949350505050565b6005546001600160a01b031633146102b85760405163469d9d3360e01b815260040160405180910390fd5b6102c2828261048e565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040516102fd91815260200190565b60405180910390a25050565b6060600480546101cc90610824565b6005546001600160a01b031633146103435760405163469d9d3360e01b815260040160405180910390fd5b61034d82826104c8565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040516102fd91815260200190565b60003361025d81858561042f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6103ce83838360016104fe565b505050565b60006103df8484610396565b90506000198114610429578181101561041a57828183604051637dc7a0d960e11b81526004016104119392919061085e565b60405180910390fd5b610429848484840360006104fe565b50505050565b6001600160a01b038316610459576000604051634b637e8f60e11b81526004016104119190610739565b6001600160a01b03821661048357600060405163ec442f0560e01b81526004016104119190610739565b6103ce8383836105d3565b6001600160a01b0382166104b857600060405163ec442f0560e01b81526004016104119190610739565b6104c4600083836105d3565b5050565b6001600160a01b0382166104f2576000604051634b637e8f60e11b81526004016104119190610739565b6104c4826000836105d3565b6001600160a01b03841661052857600060405163e602df0560e01b81526004016104119190610739565b6001600160a01b038316610552576000604051634a1406b160e11b81526004016104119190610739565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561042957826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105c591815260200190565b60405180910390a350505050565b6001600160a01b0383166105fe5780600260008282546105f3919061087f565b9091555061065d9050565b6001600160a01b0383166000908152602081905260409020548181101561063e5783818360405163391434e360e21b81526004016104119392919061085e565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661067957600280548290039055610698565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516106dd91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b81811015610718578581018301518582016040015282016106fc565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461076457600080fd5b919050565b6000806040838503121561077c57600080fd5b6107858361074d565b946020939093013593505050565b6000806000606084860312156107a857600080fd5b6107b18461074d565b92506107bf6020850161074d565b9150604084013590509250925092565b6000602082840312156107e157600080fd5b6107ea8261074d565b9392505050565b6000806040838503121561080457600080fd5b61080d8361074d565b915061081b6020840161074d565b90509250929050565b600181811c9082168061083857607f821691505b60208210810361085857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b039390931683526020830191909152604082015260600190565b8082018082111561026357634e487b7160e01b600052601160045260246000fdfea26469706673582212209cd245464de079cf047395a640d3e062a8576223963ce926533888033064552864736f6c634300081700330000000000000000000000006b175474e89094c44da98b954eedeac495271d0f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc98dd409e09cadcfcca8697e6c594347ba2afdf87aa0ecb9281ce09ea76081ad1a2646970667358221220757a413cb250d168f9225f0d9f1a0827d79c213ee071f060dbc4ebd4b6a933b264736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106200024c5760003560e01c8063032c36c414620002b657806303373ee514620002f057806310406a3514620003175780631a66371a146200033c5780631b9a91a414620003545780631d212c9614620003795780632bb33bbe146200039e57806335fac3b114620003c35780633ec97e1d14620003db5780634789badd14620003f35780634e1d184014620004205780634f1ef286146200044557806352d1902d146200045c578063555a23bb146200047457806356b22bf214620004995780635ebaf1db14620004be57806364aab23914620004e557806368ca883a146200050a5780636c9fb45d146200052c5780636cf510da14620005575780636ecc20da1462000579578063715018a6146200059e57806379408c4314620005b65780637d46b0af14620005ce5780638850aa4614620006025780638aba131714620006275780638da5cb5b146200064a5780638e472433146200066257806391f80f801462000687578063a29a43bb14620006a9578063a3fc73cd14620006ce578063a44098e114620006f3578063ad3cb1cc1462000715578063ad9d4ba31462000757578063b5063588146200076e578063b853c8cc1462000793578063b8d120f014620007b8578063bb7ea01914620007dd578063c057e2491462000802578063c0c53b8b1462000827578063d252ea25146200084c578063df6e69731462000863578063e02f64f21462000888578063ee62ef6c14620008ad578063f02bb2f414620008cb578063f2fde38b14620008f0578063fef2acae146200091557600080fd5b36620002b15773889edc2edab5f40e902b864ad4d7ade8e412f9b0193301620002a4576040513481527f78c2c7732c04afe7a845fba707807efa67ff5532e94fda81f42bc62a80a9f8439060200160405180910390a1005b620002af336200092d565b005b600080fd5b348015620002c357600080fd5b50600454620002d8906001600160a01b031681565b604051620002e7919062003697565b60405180910390f35b348015620002fd57600080fd5b50620003086103e881565b604051908152602001620002e7565b3480156200032457600080fd5b50620002af62000336366004620036c1565b620009bb565b3480156200034957600080fd5b506200030862000ad8565b3480156200036157600080fd5b50620002af62000373366004620036c1565b62000dca565b3480156200038657600080fd5b50620002af62000398366004620036ff565b62000efc565b348015620003ab57600080fd5b50620002af620003bd366004620036c1565b62000f71565b348015620003d057600080fd5b506200030861271081565b348015620003e857600080fd5b50620002d861dead81565b3480156200040057600080fd5b506000546200040f9060ff1681565b6040519015158152602001620002e7565b3480156200042d57600080fd5b50620002af6200043f3660046200371f565b620010d7565b620002af62000456366004620037e1565b620012c6565b3480156200046957600080fd5b5062000308620012eb565b3480156200048157600080fd5b50620002af62000493366004620036ff565b6200130b565b348015620004a657600080fd5b50620002af620004b8366004620036c1565b62001363565b348015620004cb57600080fd5b50600054620002d89061010090046001600160a01b031681565b348015620004f257600080fd5b50620002af6200050436600462003893565b620013f2565b3480156200051757600080fd5b50600354620002d8906001600160a01b031681565b3480156200053957600080fd5b5062000543600281565b604051600f9190910b8152602001620002e7565b3480156200056457600080fd5b50600554620002d8906001600160a01b031681565b3480156200058657600080fd5b50620002af6200059836600462003893565b62001431565b348015620005ab57600080fd5b50620002af6200146d565b348015620005c357600080fd5b506200030862001485565b348015620005db57600080fd5b50620005f3620005ed3660046200371f565b62001590565b604051620002e79190620038eb565b3480156200060f57600080fd5b50620002af62000621366004620036c1565b62001769565b3480156200063457600080fd5b506000546200040f90600160a81b900460ff1681565b3480156200065757600080fd5b50620002d862001846565b3480156200066f57600080fd5b50620002af6200068136600462003917565b62001863565b3480156200069457600080fd5b50600154620002d8906001600160a01b031681565b348015620006b657600080fd5b50620002af620006c836600462003976565b620018f0565b348015620006db57600080fd5b50620002af620006ed36600462003917565b6200192d565b3480156200070057600080fd5b50600254620002d8906001600160a01b031681565b3480156200072257600080fd5b5062000748604051806040016040528060058152602001640352e302e360dc1b81525081565b604051620002e79190620039ea565b620002af6200076836600462003976565b6200092d565b3480156200077b57600080fd5b50620002af6200078d366004620039ff565b620019b2565b348015620007a057600080fd5b50620002af620007b2366004620036c1565b62001a35565b348015620007c557600080fd5b50620002af620007d736600462003a37565b62001ab7565b348015620007ea57600080fd5b50620002af620007fc36600462003976565b62001b60565b3480156200080f57600080fd5b50620002af6200082136600462003976565b62001bdf565b3480156200083457600080fd5b50620002af6200084636600462003aa1565b62001c89565b3480156200085957600080fd5b5062000543600081565b3480156200087057600080fd5b50620002af62000882366004620036c1565b62001f5d565b3480156200089557600080fd5b50620002af620008a7366004620036c1565b6200207d565b348015620008ba57600080fd5b5062000308670de0b6b3a764000081565b348015620008d857600080fd5b50620002af620008ea36600462003976565b620021e0565b348015620008fd57600080fd5b50620002af6200090f36600462003976565b6200228a565b3480156200092257600080fd5b5062000308620022cc565b60006200093a3462002358565b905062000948828262002380565b60035460015462000968916001600160a01b039081169116848462002442565b336001600160a01b0316826001600160a01b03167f5e7e61836e7aac688d4f66257806e3118cc7a380422ee384512b7812e53cd1aa3484604051620009af92919062003af3565b60405180910390a35050565b60048054604051632770a7eb60e21b81526001600160a01b0390911691639dc29fac91620009ee91339186910162003b01565b600060405180830381600087803b15801562000a0957600080fd5b505af115801562000a1e573d6000803e3d6000fd5b505060405163ef693bed60e01b815273373238337bfe1146fb49989fc222523f83081ddb925063ef693bed915062000a5d908590859060040162003b01565b600060405180830381600087803b15801562000a7857600080fd5b505af115801562000a8d573d6000803e3d6000fd5b50505050816001600160a01b0316336001600160a01b03167fad3c54c4fffd720f5ea7bdf12784fb570c90a5cc66326f2e78cdd9dc3a210db08384604051620009af92919062003af3565b60008073373238337bfe1146fb49989fc222523f83081ddb6001600160a01b0316634ba2363a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b2e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b54919062003b1a565b9050600062000cb362000c48836001600160a01b031663487bf0826040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bc5919062003b3a565b846001600160a01b03166320aba08b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c2a919062003b3a565b62000c36904262003b6a565b676765c793fa10079d601b1b62002561565b836001600160a01b031663c92aecc46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c87573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cad919062003b3a565b6200262c565b6040516388787f2b60e01b815290915062000d3f9073373238337bfe1146fb49989fc222523f83081ddb906388787f2b9062000cf490309060040162003697565b602060405180830381865afa15801562000d12573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d38919062003b3a565b826200262c565b6040516370a0823160e01b815260008051602062004b59833981519152906370a082319062000d7390309060040162003697565b602060405180830381865afa15801562000d91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000db7919062003b3a565b62000dc3919062003b80565b9250505090565b600354604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9062000dfe903390859060040162003b01565b600060405180830381600087803b15801562000e1957600080fd5b505af115801562000e2e573d6000803e3d6000fd5b50505050600080836001600160a01b03168360405160006040518083038185875af1925050503d806000811462000e82576040519150601f19603f3d011682016040523d82523d6000602084013e62000e87565b606091505b50915091508162000eb85780604051639a367e1760e01b815260040162000eaf9190620039ea565b60405180910390fd5b836001600160a01b0316336001600160a01b031660008051602062004b99833981519152858660405162000eee92919062003af3565b60405180910390a350505050565b60005461010090046001600160a01b0316331462000f2d57604051631e31a89f60e21b815260040160405180910390fd5b62000f388162002659565b60405181151581527fc236baa3e21fdc712591cbbebfb2930bae5f479427ab19de579ef52e28680426906020015b60405180910390a150565b62000f7b6200266c565b600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801562000fc6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fec919062003b3a565b62000ff6620022cc565b62001002919062003b6a565b9050818111156200102657604051633ce95f8560e11b815260040160405180910390fd5b6003546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906200105a908690869060040162003b01565b600060405180830381600087803b1580156200107557600080fd5b505af11580156200108a573d6000803e3d6000fd5b50505050826001600160a01b03167fe912b71534193399d2c9c1ec0a0a5fa5f22d77907a892d10365e898978c4842783604051620010ca91815260200190565b60405180910390a2505050565b60005461010090046001600160a01b031633146200110857604051631e31a89f60e21b815260040160405180910390fd5b600073889edc2edab5f40e902b864ad4d7ade8e412f9b16001600160a01b031663526eae3e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200115d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001183919062003b3a565b604051633155f1fd60e11b815290915060009073889edc2edab5f40e902b864ad4d7ade8e412f9b1906362abe3fa90620011c99087908790600190889060040162003bc9565b600060405180830381865afa158015620011e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001211919081019062003bf2565b60405163e3afe0a360e01b815290915073889edc2edab5f40e902b864ad4d7ade8e412f9b19063e3afe0a390620012519087908790869060040162003ca2565b600060405180830381600087803b1580156200126c57600080fd5b505af115801562001281573d6000803e3d6000fd5b505050507f7aee03fd3b4f28038c0a19aae4813d09e881d6334d568d75f13c2147621a14668484604051620012b892919062003ccc565b60405180910390a150505050565b620012d0620026a3565b620012db826200274c565b620012e7828262002756565b5050565b6000620012f76200281a565b5060008051602062004b7983398151915290565b620013156200266c565b60008054821515600160a81b0260ff60a81b199091161790556040517f215a7d64fb51bebc34020eacfcbd22580622c6148ad085a557d7b3c4b850372c9062000f6690831515815260200190565b6000620013708262002864565b90506200137e838262002b42565b6004546002546200139e916001600160a01b039081169116858462002442565b336001600160a01b0316836001600160a01b03167f67046042551d73147aa29767c53a6787176add2c91a452108118bd0fad9c78608484604051620013e592919062003af3565b60405180910390a3505050565b60005461010090046001600160a01b031633146200142357604051631e31a89f60e21b815260040160405180910390fd5b6200142e8162002bd2565b50565b60005461010090046001600160a01b031633146200146257604051631e31a89f60e21b815260040160405180910390fd5b6200142e8162002d9d565b620014776200266c565b62001483600062002e61565b565b60405163d7f7098f60e01b815260009073373238337bfe1146fb49989fc222523f83081ddb9063d7f7098f90620014c190309060040162003697565b6020604051808303816000875af1158015620014e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001507919062003b3a565b6040516370a0823160e01b815260008051602062004b59833981519152906370a08231906200153b90309060040162003697565b602060405180830381865afa15801562001559573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200157f919062003b3a565b6200158b919062003b80565b905090565b60005460609061010090046001600160a01b03163314620015c457604051631e31a89f60e21b815260040160405180910390fd5b6000805b838110156200160557848482818110620015e657620015e662003cea565b9050602002013582620015fa919062003b80565b9150600101620015c8565b5060405163095ea7b360e01b815273ae7ab96520de3a18e5e111b5eaab095312d7fe849063095ea7b390620016559073889edc2edab5f40e902b864ad4d7ade8e412f9b190859060040162003b01565b6020604051808303816000875af115801562001675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200169b919062003d00565b50604051636b34082160e11b815273889edc2edab5f40e902b864ad4d7ade8e412f9b19063d668104290620016d99087908790309060040162003d20565b6000604051808303816000875af1158015620016f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001723919081019062003bf2565b91507f739045819b08e6460066e1a5d4637e55804ab88b0c81458bb5472dbc589717158285856040516200175a9392919062003d4e565b60405180910390a15092915050565b6000620017768262002ebf565b6003546040516340c10f1960e01b81529192506001600160a01b0316906340c10f1990620017ab908690869060040162003b01565b600060405180830381600087803b158015620017c657600080fd5b505af1158015620017db573d6000803e3d6000fd5b5050600354600154620017ff93506001600160a01b03918216925016858462002442565b336001600160a01b0316836001600160a01b03167fbfd9907006e12fdb4699f6e85603e9892fb5757c6042047d8169c4eb1b71ed958484604051620013e592919062003af3565b6000806200185362002f6d565b546001600160a01b031692915050565b60405163d505accf60e01b815273ae7ab96520de3a18e5e111b5eaab095312d7fe849063d505accf90620018a890339030908a908a908a908a908a9060040162003d78565b600060405180830381600087803b158015620018c357600080fd5b505af1158015620018d8573d6000803e3d6000fd5b50505050620018e8868662001769565b505050505050565b620018fa6200266c565b6001600160a01b038116620019225760405163d92e233d60e01b815260040160405180910390fd5b6200142e8162002f91565b60405163d505accf60e01b815273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb489063d505accf906200197290339030908a908a908a908a908a9060040162003d78565b600060405180830381600087803b1580156200198d57600080fd5b505af1158015620019a2573d6000803e3d6000fd5b50505050620018e8868662001363565b6000620019c0838362002fe3565b9050620019ce848262002b42565b600454600254620019ee916001600160a01b039081169116868462002442565b336001600160a01b0316846001600160a01b03167fba1a428b44730bdf399a9671fc82b388a7a4c5e66996f90f7ec91318763f1fd7858460405162000eee92919062003af3565b600062001a428262003399565b905062001a50838262002b42565b60045460025462001a70916001600160a01b039081169116858462002442565b336001600160a01b0316836001600160a01b03167feede33f976b77d678e192513c23c8f35e7726af75e036b9f4d7000c2c410f7268484604051620013e592919062003af3565b6040516323f2ebc360e21b815233600482015230602482015260448101869052606481018590526001608482015260ff841660a482015260c4810183905260e4810182905260008051602062004b5983398151915290638fcbaf0c9061010401600060405180830381600087803b15801562001b3257600080fd5b505af115801562001b47573d6000803e3d6000fd5b5050505062001b57878762001a35565b50505050505050565b62001b6a6200266c565b6001600160a01b03811662001b925760405163d92e233d60e01b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383161790556040517f6bd18dd71dbbe09ce1c748bd59a9d3578fd72f868be620e941baaf7ededc1b2c9062000f6690839062003697565b62001be96200266c565b6001600160a01b03811662001c115760405163d92e233d60e01b815260040160405180910390fd5b6001546001600160a01b03161562001c3c57604051633c89824560e11b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383161790556040517fef378cd64aa039f8aa85e2d1348e2d05fc857350febd6741215907a7176da26b9062000f6690839062003697565b600062001c95620033f5565b805490915060ff600160401b82041615906001600160401b031660008115801562001cbd5750825b90506000826001600160401b0316600114801562001cda5750303b155b90508115801562001ce9575080155b1562001d085760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831562001d3257845460ff60401b1916600160401b1785555b6001600160a01b038616158062001d5057506001600160a01b038816155b8062001d6357506001600160a01b038716155b1562001d825760405163d92e233d60e01b815260040160405180910390fd5b3060405162001d919062003689565b6001600160a01b0390911681526060602082018190526014908201527308ac8cecad8cae6e640aee4c2e0e0cac8408aa8960631b608082015260a060408201819052600590820152640caee8aa8960db1b60c082015260e001604051809103906000f08015801562001e07573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055604051309062001e389062003689565b6001600160a01b03909116815260606020820181905260149082015273115919d95b195cdcc815dc985c1c1959081554d160621b608082015260a06040820181905260059082015264195dd554d160da1b60c082015260e001604051809103906000f08015801562001eae573d6000803e3d6000fd5b50600480546001600160a01b03199081166001600160a01b0393841617909155600580549091169188169190911790556000805460ff60a81b1916815562001ef69062002659565b62001f018762002f91565b62001f0c8862003419565b831562001f5357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600354604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9062001f91903390859060040162003b01565b600060405180830381600087803b15801562001fac57600080fd5b505af115801562001fc1573d6000803e3d6000fd5b505060405163a9059cbb60e01b815273ae7ab96520de3a18e5e111b5eaab095312d7fe84925063a9059cbb915062002000908590859060040162003b01565b6020604051808303816000875af115801562002020573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002046919062003d00565b50816001600160a01b0316336001600160a01b031660008051602062004b998339815191528384604051620009af92919062003af3565b620020876200266c565b6000600460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620020dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002103919062003b3a565b6200210d62000ad8565b62002119919062003b6a565b9050818111156200213d57604051633ce95f8560e11b815260040160405180910390fd5b600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f19916200217091879187910162003b01565b600060405180830381600087803b1580156200218b57600080fd5b505af1158015620021a0573d6000803e3d6000fd5b50505050826001600160a01b03167fff4ccf245d654193481740374c71e8e4d2e48a49d4b6f2e634b3cf202139aab383604051620010ca91815260200190565b620021ea6200266c565b6001600160a01b038116620022125760405163d92e233d60e01b815260040160405180910390fd5b6002546001600160a01b0316156200223d576040516385698c8b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383161790556040517fbdb2fff55a25f4c33d1f97c239c9f34f0978a7fcb2e8761cf32c59c7e6a3352b9062000f6690839062003697565b620022946200266c565b6001600160a01b038116620022c1576000604051631e4fbdf760e01b815260040162000eaf919062003697565b6200142e8162002e61565b6040516370a0823160e01b815260009073ae7ab96520de3a18e5e111b5eaab095312d7fe84906370a08231906200230890309060040162003697565b602060405180830381865afa15801562002326573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200234c919062003b3a565b6200158b904762003b80565b6000816000036200237c576040516356316e8760e01b815260040160405180910390fd5b5090565b60005460ff16156200239757620023978162002d9d565b600054600160a81b900460ff16156200240e576003546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990620023de903090859060040162003b01565b600060405180830381600087803b158015620023f957600080fd5b505af1158015620018e8573d6000803e3d6000fd5b6003546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990620023de908590859060040162003b01565b600054600160a81b900460ff16156200255b5760055460405163095ea7b360e01b81526001600160a01b038681169263095ea7b3926200248b9290911690859060040162003b01565b6020604051808303816000875af1158015620024ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024d1919062003d00565b5060055460405163041c592960e51b81526001600160a01b038681166004830152858116602483015284811660448301526064820184905260006084830181905260c060a484015260c48301529091169063838b25209060e401600060405180830381600087803b1580156200254657600080fd5b505af115801562001f53573d6000803e3d6000fd5b50505050565b60008380156200260c576001841680156200257f5785925062002583565b8392505b50600283046002850494505b841562002605578586028687820414620025a857600080fd5b81810181811015620025b957600080fd5b8590049650506001851615620025f9578583028387820414158715151615620025e157600080fd5b81810181811015620025f257600080fd5b8590049350505b6002850494506200258f565b5062002624565b8380156200261e576000925062002622565b8392505b505b509392505050565b6000676765c793fa10079d601b1b62002646838562003db9565b62002652919062003dd3565b9392505050565b6000805460ff1916911515919091179055565b336200267762001846565b6001600160a01b03161462001483573360405163118cdaa760e01b815260040162000eaf919062003697565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806200272d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200272160008051602062004b79833981519152546001600160a01b031690565b6001600160a01b031614155b15620014835760405163703e46dd60e11b815260040160405180910390fd5b6200142e6200266c565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015620027b3575060408051601f3d908101601f19168201909252620027b09181019062003b3a565b60015b620027d55781604051634c9c8ce360e01b815260040162000eaf919062003697565b60008051602062004b7983398151915281146200280957604051632a87526960e21b81526004810182905260240162000eaf565b6200281583836200342e565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620014835760405163703e46dd60e11b815260040160405180910390fd5b60008160000362002888576040516356316e8760e01b815260040160405180910390fd5b600062002895836200348b565b90506000670de0b6b3a7640000827389b78cfa322f6c5de0abceecab66aee45393cc5a6001600160a01b031663568d4b6f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620028f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200291c919062003b3a565b62002928919062003db9565b62002934919062003dd3565b905062002942818362003b6a565b6040516323b872dd60e01b815290935073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48906323b872dd90620029829033903090899060040162003df6565b6020604051808303816000875af1158015620029a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029c8919062003d00565b5073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486001600160a01b031663095ea7b37389b78cfa322f6c5de0abceecab66aee45393cc5a6001600160a01b03166301664f666040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002a3f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a65919062003b1a565b866040518363ffffffff1660e01b815260040162002a8592919062003b01565b6020604051808303816000875af115801562002aa5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002acb919062003d00565b50604051634acc893b60e11b81527389b78cfa322f6c5de0abceecab66aee45393cc5a9063959912769062002b07903090889060040162003b01565b600060405180830381600087803b15801562002b2257600080fd5b505af115801562002b37573d6000803e3d6000fd5b505050505050919050565b60005460ff161562002b595762002b598162002bd2565b600054600160a81b900460ff161562002b9f57600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f1991620023de91309186910162003b01565b600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f1991620023de91869186910162003b01565b6040516370a0823160e01b815260008051602062004b59833981519152906370a082319062002c0690309060040162003697565b602060405180830381865afa15801562002c24573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002c4a919062003b3a565b81111562002c6b5760405163356680b760e01b815260040160405180910390fd5b60405163095ea7b360e01b815260008051602062004b598339815191529063095ea7b39062002cb59073373238337bfe1146fb49989fc222523f83081ddb90859060040162003b01565b6020604051808303816000875af115801562002cd5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002cfb919062003d00565b50604051633b4da69f60e01b815273373238337bfe1146fb49989fc222523f83081ddb90633b4da69f9062002d37903090859060040162003b01565b600060405180830381600087803b15801562002d5257600080fd5b505af115801562002d67573d6000803e3d6000fd5b505050507f982021fc45e4a9c28ba63e98a2a2e534166e3bcb2ef32e1f120fd754cbb5c7188160405162000f6691815260200190565b4781111562002dbf5760405163356680b760e01b815260040160405180910390fd5b60405163a1903eab60e01b815273ae7ab96520de3a18e5e111b5eaab095312d7fe849063a1903eab90839062002dfb9060009060040162003697565b6000604051808303818588803b15801562002e1557600080fd5b505af115801562002e2a573d6000803e3d6000fd5b50505050507f5ac3d75f987a73cee9a456a277139319eee6559e3d027a360d2fc37ac93e74a38160405162000f6691815260200190565b600062002e6d62002f6d565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60008160000362002ee3576040516356316e8760e01b815260040160405180910390fd5b6040516323b872dd60e01b815273ae7ab96520de3a18e5e111b5eaab095312d7fe84906323b872dd9062002f209033903090879060040162003df6565b6020604051808303816000875af115801562002f40573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f66919062003d00565b5090919050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930090565b60008054610100600160a81b0319166101006001600160a01b038416021790556040517f6901da73a3480b0bbd7deb64f259ff29a76ce811c7a3e5cf495f0e1eb4fb4dfb9062000f6690839062003697565b60008260000362003007576040516356316e8760e01b815260040160405180910390fd5b6040516370a0823160e01b815260009073dac17f958d2ee523a2206206994597c13d831ec7906370a08231906200304390309060040162003697565b602060405180830381865afa15801562003061573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003087919062003b3a565b6040516323b872dd60e01b815290915073dac17f958d2ee523a2206206994597c13d831ec7906323b872dd90620030c79033903090899060040162003df6565b600060405180830381600087803b158015620030e257600080fd5b505af1158015620030f7573d6000803e3d6000fd5b50506040516370a0823160e01b81526000925083915073dac17f958d2ee523a2206206994597c13d831ec7906370a08231906200313990309060040162003697565b602060405180830381865afa15801562003157573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200317d919062003b3a565b62003189919062003b6a565b6040516370a0823160e01b815290915060009060008051602062004b59833981519152906370a0823190620031c390309060040162003697565b602060405180830381865afa158015620031e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003207919062003b3a565b60405163095ea7b360e01b815290915073dac17f958d2ee523a2206206994597c13d831ec79063095ea7b390620032599073bebc44782c7db0a1a60cb6fe97d0b483032ff1c790869060040162003b01565b600060405180830381600087803b1580156200327457600080fd5b505af115801562003289573d6000803e3d6000fd5b5050604051630f7c084960e21b81526002600482015260006024820152604481018590526064810188905273bebc44782c7db0a1a60cb6fe97d0b483032ff1c79250633df021249150608401600060405180830381600087803b158015620032f057600080fd5b505af115801562003305573d6000803e3d6000fd5b50506040516370a0823160e01b815283925060008051602062004b5983398151915291506370a08231906200333f90309060040162003697565b602060405180830381865afa1580156200335d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003383919062003b3a565b6200338f919062003b6a565b9695505050505050565b600081600003620033bd576040516356316e8760e01b815260040160405180910390fd5b6040516323b872dd60e01b815260008051602062004b59833981519152906323b872dd9062002f209033903090879060040162003df6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b62003423620034ba565b6200142e81620034e2565b6200343982620034ec565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511562003481576200281582826200354c565b620012e7620035c8565b60006200349b6006601262003b6a565b620034a890600a62003f17565b620034b4908362003db9565b92915050565b620034c4620035e8565b6200148357604051631afcd79f60e31b815260040160405180910390fd5b62002294620034ba565b806001600160a01b03163b6000036200351c5780604051634c9c8ce360e01b815260040162000eaf919062003697565b60008051602062004b7983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516200356b919062003f25565b600060405180830381855af49150503d8060008114620035a8576040519150601f19603f3d011682016040523d82523d6000602084013e620035ad565b606091505b5091509150620035bf85838362003604565b95945050505050565b3415620014835760405163b398979f60e01b815260040160405180910390fd5b6000620035f4620033f5565b54600160401b900460ff16919050565b6060826200361d5762003617826200365f565b62002652565b81511580156200363557506001600160a01b0384163b155b15620036585783604051639996b31560e01b815260040162000eaf919062003697565b5092915050565b805115620036705780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b610c158062003f4483390190565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146200142e57600080fd5b60008060408385031215620036d557600080fd5b8235620036e281620036ab565b946020939093013593505050565b80151581146200142e57600080fd5b6000602082840312156200371257600080fd5b81356200265281620036f0565b600080602083850312156200373357600080fd5b82356001600160401b03808211156200374b57600080fd5b818501915085601f8301126200376057600080fd5b8135818111156200377057600080fd5b8660208260051b85010111156200378657600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620037d957620037d962003798565b604052919050565b60008060408385031215620037f557600080fd5b82356200380281620036ab565b91506020838101356001600160401b03808211156200382057600080fd5b818601915086601f8301126200383557600080fd5b8135818111156200384a576200384a62003798565b6200385e601f8201601f19168501620037ae565b915080825287848285010111156200387557600080fd5b80848401858401376000848284010152508093505050509250929050565b600060208284031215620038a657600080fd5b5035919050565b60008151808452602080850194506020840160005b83811015620038e057815187529582019590820190600101620038c2565b509495945050505050565b602081526000620026526020830184620038ad565b803560ff811681146200391257600080fd5b919050565b60008060008060008060c087890312156200393157600080fd5b86356200393e81620036ab565b955060208701359450604087013593506200395c6060880162003900565b92506080870135915060a087013590509295509295509295565b6000602082840312156200398957600080fd5b81356200265281620036ab565b60005b83811015620039b357818101518382015260200162003999565b50506000910152565b60008151808452620039d681602086016020860162003996565b601f01601f19169290920160200192915050565b602081526000620026526020830184620039bc565b60008060006060848603121562003a1557600080fd5b833562003a2281620036ab565b95602085013595506040909401359392505050565b600080600080600080600060e0888a03121562003a5357600080fd5b873562003a6081620036ab565b965060208801359550604088013594506060880135935062003a856080890162003900565b925060a0880135915060c0880135905092959891949750929550565b60008060006060848603121562003ab757600080fd5b833562003ac481620036ab565b9250602084013562003ad681620036ab565b9150604084013562003ae881620036ab565b809150509250925092565b918252602082015260400190565b6001600160a01b03929092168252602082015260400190565b60006020828403121562003b2d57600080fd5b81516200265281620036ab565b60006020828403121562003b4d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115620034b457620034b462003b54565b80820180821115620034b457620034b462003b54565b81835260006001600160fb1b0383111562003bb057600080fd5b8260051b80836020870137939093016020019392505050565b60608152600062003bdf60608301868862003b96565b6020830194909452506040015292915050565b6000602080838503121562003c0657600080fd5b82516001600160401b038082111562003c1e57600080fd5b818501915085601f83011262003c3357600080fd5b81518181111562003c485762003c4862003798565b8060051b915062003c5b848301620037ae565b818152918301840191848101908884111562003c7657600080fd5b938501935b8385101562003c965784518252938501939085019062003c7b565b98975050505050505050565b60408152600062003cb860408301858762003b96565b82810360208401526200338f8185620038ad565b60208152600062003ce260208301848662003b96565b949350505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562003d1357600080fd5b81516200265281620036f0565b60408152600062003d3660408301858762003b96565b905060018060a01b0383166020830152949350505050565b60408152600062003d636040830186620038ad565b82810360208401526200338f81858762003b96565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b8082028115828204841417620034b457620034b462003b54565b60008262003df157634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600181815b8085111562003e5b57816000190482111562003e3f5762003e3f62003b54565b8085161562003e4d57918102915b93841c939080029062003e1f565b509250929050565b60008262003e7457506001620034b4565b8162003e8357506000620034b4565b816001811462003e9c576002811462003ea75762003ec7565b6001915050620034b4565b60ff84111562003ebb5762003ebb62003b54565b50506001821b620034b4565b5060208310610133831016604e8410600b841016171562003eec575081810a620034b4565b62003ef8838362003e1a565b806000190482111562003f0f5762003f0f62003b54565b029392505050565b600062002652838362003e63565b6000825162003f3981846020870162003996565b919091019291505056fe60806040523480156200001157600080fd5b5060405162000c1538038062000c15833981016040819052620000349162000148565b8181600362000044838262000263565b50600462000053828262000263565b5050600580546001600160a01b0319166001600160a01b039590951694909417909355506200032f915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000a857600080fd5b81516001600160401b0380821115620000c557620000c562000080565b604051601f8301601f19908116603f01168101908282118183101715620000f057620000f062000080565b81604052838152602092508660208588010111156200010e57600080fd5b600091505b8382101562000132578582018301518183018401529082019062000113565b6000602085830101528094505050505092915050565b6000806000606084860312156200015e57600080fd5b83516001600160a01b03811681146200017657600080fd5b60208501519093506001600160401b03808211156200019457600080fd5b620001a28783880162000096565b93506040860151915080821115620001b957600080fd5b50620001c88682870162000096565b9150509250925092565b600181811c90821680620001e757607f821691505b6020821081036200020857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025e576000816000526020600020601f850160051c81016020861015620002395750805b601f850160051c820191505b818110156200025a5782815560010162000245565b5050505b505050565b81516001600160401b038111156200027f576200027f62000080565b6200029781620002908454620001d2565b846200020e565b602080601f831160018114620002cf5760008415620002b65750858301515b600019600386901b1c1916600185901b1785556200025a565b600085815260208120601f198616915b828110156200030057888601518255948401946001909101908401620002df565b50858210156200031f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6108d6806200033f6000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c806306fdde03146100a957806307546172146100c7578063095ea7b3146100e757806318160ddd1461010a57806323b872dd1461011c578063313ce5671461012f57806340c10f191461013e57806370a082311461015357806395d89b411461017c5780639dc29fac14610184578063a9059cbb14610197578063dd62ed3e146101aa575b600080fd5b6100b16101bd565b6040516100be91906106ea565b60405180910390f35b6005546100da906001600160a01b031681565b6040516100be9190610739565b6100fa6100f5366004610769565b61024f565b60405190151581526020016100be565b6002545b6040519081526020016100be565b6100fa61012a366004610793565b610269565b604051601281526020016100be565b61015161014c366004610769565b61028d565b005b61010e6101613660046107cf565b6001600160a01b031660009081526020819052604090205490565b6100b1610309565b610151610192366004610769565b610318565b6100fa6101a5366004610769565b610388565b61010e6101b83660046107f1565b610396565b6060600380546101cc90610824565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610824565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b60003361025d8185856103c1565b60019150505b92915050565b6000336102778582856103d3565b61028285858561042f565b506001949350505050565b6005546001600160a01b031633146102b85760405163469d9d3360e01b815260040160405180910390fd5b6102c2828261048e565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040516102fd91815260200190565b60405180910390a25050565b6060600480546101cc90610824565b6005546001600160a01b031633146103435760405163469d9d3360e01b815260040160405180910390fd5b61034d82826104c8565b816001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040516102fd91815260200190565b60003361025d81858561042f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6103ce83838360016104fe565b505050565b60006103df8484610396565b90506000198114610429578181101561041a57828183604051637dc7a0d960e11b81526004016104119392919061085e565b60405180910390fd5b610429848484840360006104fe565b50505050565b6001600160a01b038316610459576000604051634b637e8f60e11b81526004016104119190610739565b6001600160a01b03821661048357600060405163ec442f0560e01b81526004016104119190610739565b6103ce8383836105d3565b6001600160a01b0382166104b857600060405163ec442f0560e01b81526004016104119190610739565b6104c4600083836105d3565b5050565b6001600160a01b0382166104f2576000604051634b637e8f60e11b81526004016104119190610739565b6104c4826000836105d3565b6001600160a01b03841661052857600060405163e602df0560e01b81526004016104119190610739565b6001600160a01b038316610552576000604051634a1406b160e11b81526004016104119190610739565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561042957826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105c591815260200190565b60405180910390a350505050565b6001600160a01b0383166105fe5780600260008282546105f3919061087f565b9091555061065d9050565b6001600160a01b0383166000908152602081905260409020548181101561063e5783818360405163391434e360e21b81526004016104119392919061085e565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661067957600280548290039055610698565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516106dd91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b81811015610718578581018301518582016040015282016106fc565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461076457600080fd5b919050565b6000806040838503121561077c57600080fd5b6107858361074d565b946020939093013593505050565b6000806000606084860312156107a857600080fd5b6107b18461074d565b92506107bf6020850161074d565b9150604084013590509250925092565b6000602082840312156107e157600080fd5b6107ea8261074d565b9392505050565b6000806040838503121561080457600080fd5b61080d8361074d565b915061081b6020840161074d565b90509250929050565b600181811c9082168061083857607f821691505b60208210810361085857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b039390931683526020830191909152604082015260600190565b8082018082111561026357634e487b7160e01b600052601160045260246000fdfea26469706673582212209cd245464de079cf047395a640d3e062a8576223963ce926533888033064552864736f6c634300081700330000000000000000000000006b175474e89094c44da98b954eedeac495271d0f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc98dd409e09cadcfcca8697e6c594347ba2afdf87aa0ecb9281ce09ea76081ad1a2646970667358221220757a413cb250d168f9225f0d9f1a0827d79c213ee071f060dbc4ebd4b6a933b264736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "depositDAI(address,uint256)": {
        "params": {
          "daiAmount": "Amount to deposit in DAI (wad)",
          "to": "Address to mint wrapped tokens to"
        }
      },
      "depositDAIWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "daiAmount": "Amount to deposit in DAI (wad)",
          "expiry": "Permit signature expiry timestamp",
          "nonce": "Permit signature nonce",
          "r": "Permit signature r parameter",
          "s": "Permit signature s parameter",
          "v": "Permit signature v parameter"
        }
      },
      "depositEth(address)": {
        "params": {
          "to": "Address to mint wrapped tokens to"
        }
      },
      "depositStEth(address,uint256)": {
        "params": {
          "stEthAmount": "Amount to deposit in DAI (wad)",
          "to": "Address to mint wrapped tokens to"
        }
      },
      "depositStEthWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "USDC is converted to DAI using Maker DssPsm",
        "params": {
          "deadline": "Permit signature deadline timestamp",
          "r": "Permit signature r parameter",
          "s": "Permit signature s parameter",
          "stEthAmount": "Amount to deposit in USDC (usd)",
          "v": "Permit signature v parameter"
        }
      },
      "depositUSDC(address,uint256)": {
        "details": "USDC is converted to DAI using Maker DssPsm",
        "params": {
          "to": "Address to mint wrapped tokens to",
          "usdcAmount": "Amount to deposit in USDC (usd)"
        }
      },
      "depositUSDCWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "USDC is converted to DAI using Maker DssPsm",
        "params": {
          "deadline": "Permit signature deadline timestamp",
          "r": "Permit signature r parameter",
          "s": "Permit signature s parameter",
          "usdcAmount": "Amount to deposit in USDC (usd)",
          "v": "Permit signature v parameter"
        }
      },
      "depositUSDT(address,uint256,uint256)": {
        "details": "USDT is converted to DAI using Maker DssPsm",
        "params": {
          "minDAIAmount": "Minimum amount of DAI to receive from the PSM (slippage protection)",
          "to": "Address to mint wrapped tokens to",
          "usdtAmount": "Amount to deposit in USDT (usd)"
        }
      },
      "mintEthBasedOnStakedAmount(address,uint256)": {
        "details": "The owner can only mint up to the amount of ETH deposited + ETH staking rewards from Lido",
        "params": {
          "amount": "Amount of wrapped tokens to mint",
          "to": "Address to mint wrapped tokens to"
        }
      },
      "mintUSDBasedOnStakedAmount(address,uint256)": {
        "details": "The owner can only mint up to the amount of USD deposited + USD staking rewards from the Maker DSR",
        "params": {
          "amount": "Amount of wrapped tokens to mint",
          "to": "Address to mint wrapped tokens to"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAutoBridge(bool)": {
        "params": {
          "_autoBridge": "True to pause autobridging, false to unpause"
        }
      },
      "setL1StandardBridge(address)": {
        "params": {
          "_l1standardBridge": "Address of the L1StandardBridge contract"
        }
      },
      "setL2Eth(address)": {
        "params": {
          "_l2Eth": "Address of the L2 Wrapped Eth contract"
        }
      },
      "setL2USD(address)": {
        "params": {
          "_l2USD": "Address of the L2 Wrapped USD contract"
        }
      },
      "setStaker(address)": {
        "details": "The staker can manually stake ETH into Lido and DAI into the Maker DSR They can also toggle the autostaking of funds. We always want a bit of ETH and DAI unstaked so users can instantly withdraw funds without waiting for the lido withdrawal period.",
        "params": {
          "_staker": "Address of the new staker"
        }
      },
      "totalETHBalance()": {
        "returns": {
          "_0": "Pooled ETH balance between buffered balance and deposited Lido balance"
        }
      },
      "totalUSDBalance()": {
        "returns": {
          "_0": "Pooled USD balance between buffered balance and deposited DSR balance"
        }
      },
      "totalUSDBalanceNoUpdate()": {
        "details": "Does not update DSR yield",
        "returns": {
          "_0": "Pooled USD balance between buffered balance and deposited DSR balance"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdrawEth(address,uint256)": {
        "params": {
          "amount": "Amount to withdraw",
          "to": "Address to withdraw Eth to"
        }
      },
      "withdrawStEth(address,uint256)": {
        "params": {
          "amount": "Amount to withdraw",
          "to": "Address to withdraw Eth to"
        }
      },
      "withdrawUSD(address,uint256)": {
        "params": {
          "amount": "Amount to withdraw",
          "to": "Address to withdraw dai to"
        }
      }
    },
    "title": "EdgelessDeposit",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositDAI(address,uint256)": {
        "notice": "Deposit DAI, mint wrapped tokens, and bridge to the Edgeless L2"
      },
      "depositDAIWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit DAI to the USD pool with a permit signature"
      },
      "depositEth(address)": {
        "notice": "Deposit ETH, mint wrapped tokens, and bridge to the Edgeless L2"
      },
      "depositStEth(address,uint256)": {
        "notice": "Deposit stEth, mint wrapped tokens, and bridge to the Edgeless L2"
      },
      "depositStEthWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit STETH with a permit signature"
      },
      "depositUSDC(address,uint256)": {
        "notice": "Deposit USDC, mint wrapped tokens, and bridge to the Edgeless L2"
      },
      "depositUSDCWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit USDC to the USD pool with a permit signature"
      },
      "depositUSDT(address,uint256,uint256)": {
        "notice": "Deposit USDT, mint wrapped tokens, and bridge to the Edgeless L2"
      },
      "mintEthBasedOnStakedAmount(address,uint256)": {
        "notice": "Mint wrapped tokens based on the amount of ETH staked"
      },
      "mintUSDBasedOnStakedAmount(address,uint256)": {
        "notice": "Mint wrapped tokens based on the amount of USD staked"
      },
      "setAutoBridge(bool)": {
        "notice": "Pause autobridging of wrapped tokens to the Edgeless L2"
      },
      "setAutoStake(bool)": {
        "notice": "Set autoStake to true so all deposits sent to this contract will be staked."
      },
      "setL1StandardBridge(address)": {
        "notice": "Set the address of the L1StandardBridge contract"
      },
      "setL2Eth(address)": {
        "notice": "Set the address of the L2 Wrapped Eth contract"
      },
      "setL2USD(address)": {
        "notice": "Set the address of the L2 Wrapped USD contract"
      },
      "setStaker(address)": {
        "notice": "Set the address of staker"
      },
      "stakeDAI(uint256)": {
        "notice": "The staker can manually stake `amount` of DAI into the Maker DSR"
      },
      "stakeETH(uint256)": {
        "notice": "The staker can manually stake `amount` of ETH into Lido"
      },
      "totalETHBalance()": {
        "notice": "Get the current ETH pool balance"
      },
      "totalUSDBalance()": {
        "notice": "Get the current USD pool balance"
      },
      "totalUSDBalanceNoUpdate()": {
        "notice": "Get the current USD pool balance"
      },
      "withdrawEth(address,uint256)": {
        "notice": "Withdraw Eth from the ETH pool"
      },
      "withdrawStEth(address,uint256)": {
        "notice": "Withdraw StEth from the ETH pool"
      },
      "withdrawUSD(address,uint256)": {
        "notice": "Withdraw dai from the stablecoin pool"
      }
    },
    "notice": "EdgelessDeposit is a contract that allows users to deposit ETH, USDC, USDT, or DAI and receive wrapped tokens in return. The wrapped tokens can be used to bridge to the Edgeless L2",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3826,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "autoStake",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3828,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "staker",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2811,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "autoBridge",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2813,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "l2ETH",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2815,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "l2USD",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2818,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "wrappedEth",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(WrappedToken)4323"
      },
      {
        "astId": 2821,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "wrappedUSD",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(WrappedToken)4323"
      },
      {
        "astId": 2824,
        "contract": "src/EdgelessDeposit.sol:EdgelessDeposit",
        "label": "l1standardBridge",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IL1StandardBridge)4754"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IL1StandardBridge)4754": {
        "encoding": "inplace",
        "label": "contract IL1StandardBridge",
        "numberOfBytes": "20"
      },
      "t_contract(WrappedToken)4323": {
        "encoding": "inplace",
        "label": "contract WrappedToken",
        "numberOfBytes": "20"
      }
    }
  }
}