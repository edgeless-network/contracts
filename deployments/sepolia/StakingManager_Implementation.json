{
  "address": "0x719B74bc9A4E826fb71658bE378803DcDaFD33Cf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "OnlyStaker",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IStakingStrategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "AddStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IStakingStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "SetActiveStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "autoStake",
          "type": "bool"
        }
      ],
      "name": "SetAutoStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "SetDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "SetStaker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeStrategyIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "contract IStakingStrategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getActiveStrategy",
      "outputs": [
        {
          "internalType": "contract IStakingStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetTotalNoUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "setActiveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_autoStake",
          "type": "bool"
        }
      ],
      "name": "setAutoStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "setDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "setStaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "contract IStakingStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbcc5cb243f8aee24e53933982c4e8c13b048956c44c58451c7eec5995478a81a",
  "receipt": {
    "to": null,
    "from": "0x08C6fBA53BF2Ae19DBdC330E258B510c1C148e44",
    "contractAddress": "0x719B74bc9A4E826fb71658bE378803DcDaFD33Cf",
    "transactionIndex": 116,
    "gasUsed": "1336156",
    "logsBloom": "0x
    "blockHash": "0x38f6d853a36ce3102ee06f80aa33354208a2cd4b52fbf7bbc48f75ab245376cf",
    "transactionHash": "0xbcc5cb243f8aee24e53933982c4e8c13b048956c44c58451c7eec5995478a81a",
    "logs": [],
    "blockNumber": 5105508,
    "cumulativeGasUsed": "15096867",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "404a57e9177115a388da0654e3829a4b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyStaker\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IStakingStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"AddStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IStakingStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"SetActiveStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"name\":\"SetAutoStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"SetDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"SetStaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeStrategyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract IStakingStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getActiveStrategy\",\"outputs\":[{\"internalType\":\"contract IStakingStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetTotalNoUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"setActiveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoStake\",\"type\":\"bool\"}],\"name\":\"setAutoStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"setDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"setStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"contract IStakingStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getActiveStrategy(address)\":{\"notice\":\"--------------------------------- \\ud83d\\udd0e View Functions \\ud83d\\udd0d ---------------------------------\"},\"setStaker(address)\":{\"notice\":\"---------------------------------- \\ud83d\\udd13 Admin Functions \\ud83d\\udd13 ----------------------------------\"},\"stake(address,uint256)\":{\"notice\":\"-------------------------------- \\ud83d\\udcdd Staker Functions \\ud83d\\udcdd --------------------------------\"}},\"notice\":\"The purpose of this contract is solely to take in assets and send them to strategies. Upon withdrawal, all assets go to the depositor. TODO: The depositor needs to be set after deployment\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/StakingManager.sol\":\"StakingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"src/StakingManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\nimport { IStakingStrategy } from \\\"./interfaces/IStakingStrategy.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\n/**\\n * @notice The purpose of this contract is solely to take in assets and send them to strategies.\\n * Upon withdrawal, all assets go to the depositor.\\n * TODO: The depositor needs to be set after deployment\\n */\\ncontract StakingManager is Ownable2StepUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => IStakingStrategy[]) public strategies;\\n    mapping(address => uint256) public activeStrategyIndex;\\n    address public staker;\\n    address public depositor;\\n    bool public autoStake;\\n    address public constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    event Stake(address indexed asset, uint256 amount);\\n    event Withdraw(address indexed asset, uint256 amount);\\n    event SetStaker(address staker);\\n    event SetDepositor(address depositor);\\n    event SetAutoStake(bool autoStake);\\n    event AddStrategy(address indexed asset, IStakingStrategy indexed strategy);\\n    event SetActiveStrategy(address indexed asset, uint256 index);\\n    event RemoveStrategy(address indexed asset, IStakingStrategy indexed strategy, uint256 withdrawnAmount);\\n\\n    error OnlyStaker(address sender);\\n    error TransferFailed(bytes data);\\n\\n    modifier onlyStaker() {\\n        if (msg.sender != staker) {\\n            revert OnlyStaker(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    function initialize(address _owner, address _staker) external initializer {\\n        staker = _staker;\\n        __Ownable_init(_owner);\\n    }\\n\\n    /// -------------------------------- \\ud83d\\udcdd Staker Functions \\ud83d\\udcdd --------------------------------\\n    function stake(address asset, uint256 amount) external payable onlyStaker {\\n        if (asset == ETH_ADDRESS) {\\n            _stakeEth(msg.value);\\n        } else {\\n            _stakeERC20(asset, amount);\\n        }\\n        emit Stake(asset, amount);\\n    }\\n\\n    function _stakeEth(uint256 amount) internal {\\n        IStakingStrategy strategy = getActiveStrategy(ETH_ADDRESS);\\n        strategy.deposit{ value: amount }(amount);\\n    }\\n\\n    function _stakeERC20(address asset, uint256 amount) internal {\\n        IStakingStrategy strategy = getActiveStrategy(asset);\\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\\n        IERC20(asset).approve(address(strategy), amount);\\n        strategy.deposit(amount);\\n    }\\n\\n    function withdraw(address asset, uint256 amount) external onlyStaker {\\n        if (asset == ETH_ADDRESS) {\\n            _withdrawEth(amount);\\n        } else {\\n            _withdrawERC20(asset, amount);\\n        }\\n        emit Withdraw(asset, amount);\\n    }\\n\\n    function _withdrawEth(uint256 amount) internal {\\n        IStakingStrategy strategy = getActiveStrategy(ETH_ADDRESS);\\n        uint256 withdrawnAmount;\\n        if (address(strategy) != address(0)) withdrawnAmount = strategy.withdraw(amount);\\n        (bool success, bytes memory data) = depositor.call{ value: withdrawnAmount }(\\\"\\\");\\n        if (!success) {\\n            revert TransferFailed(data);\\n        }\\n    }\\n\\n    function _withdrawERC20(address asset, uint256 amount) internal {\\n        IStakingStrategy strategy = getActiveStrategy(asset);\\n        uint256 withdrawnAmount;\\n        if (address(strategy) != address(0)) {\\n            withdrawnAmount = strategy.withdraw(amount);\\n        }\\n        IERC20(asset).safeTransfer(depositor, withdrawnAmount);\\n    }\\n\\n    /// ---------------------------------- \\ud83d\\udd13 Admin Functions \\ud83d\\udd13 ----------------------------------\\n    function setStaker(address _staker) external onlyOwner {\\n        staker = _staker;\\n        emit SetStaker(_staker);\\n    }\\n\\n    function setDepositor(address _depositor) external onlyOwner {\\n        depositor = _depositor;\\n        emit SetDepositor(_depositor);\\n    }\\n\\n    function setAutoStake(bool _autoStake) external onlyOwner {\\n        autoStake = _autoStake;\\n        emit SetAutoStake(_autoStake);\\n    }\\n\\n    function addStrategy(address asset, IStakingStrategy strategy) external onlyOwner {\\n        strategies[asset].push(strategy);\\n        emit AddStrategy(asset, strategy);\\n    }\\n\\n    function setActiveStrategy(address asset, uint256 index) external onlyOwner {\\n        activeStrategyIndex[asset] = index;\\n        emit SetActiveStrategy(asset, index);\\n    }\\n\\n    function removeStrategy(address asset, uint256 index) external onlyOwner {\\n        IStakingStrategy strategy = strategies[asset][index];\\n        uint256 lastIndex = strategies[asset].length - 1;\\n        strategies[asset][index] = strategies[asset][lastIndex];\\n        strategies[asset].pop();\\n        if (activeStrategyIndex[asset] == index) {\\n            activeStrategyIndex[asset] = lastIndex;\\n        }\\n        uint256 withdrawnAmount = strategy.withdraw(strategy.underlyingAssetAmount());\\n        emit RemoveStrategy(asset, strategy, withdrawnAmount);\\n    }\\n\\n    /// --------------------------------- \\ud83d\\udd0e View Functions \\ud83d\\udd0d ---------------------------------\\n    function getActiveStrategy(address asset) public view returns (IStakingStrategy) {\\n        return strategies[asset][activeStrategyIndex[asset]];\\n    }\\n\\n    function getAssetTotal(address asset) external returns (uint256 total) {\\n        for (uint256 i = 0; i < strategies[asset].length; i++) {\\n            IStakingStrategy strategy = strategies[asset][i];\\n            total += strategy.underlyingAssetAmount();\\n        }\\n    }\\n\\n    function getAssetTotalNoUpdate(address asset) external view returns (uint256 total) {\\n        for (uint256 i = 0; i < strategies[asset].length; i++) {\\n            IStakingStrategy strategy = strategies[asset][i];\\n            total += strategy.underlyingAssetAmountNoUpdate();\\n        }\\n    }\\n\\n    receive() external payable { }\\n}\\n\",\"keccak256\":\"0x8305c2fc7c97efa34ae1d925bc12562cd601dc80fac42180fe1ba881cfe210b8\",\"license\":\"UNLICENSED\"},\"src/interfaces/IStakingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.23;\\n\\ninterface IStakingStrategy {\\n    function deposit(uint256 amount) external payable;\\n    function withdraw(uint256 amount) external returns (uint256 withdrawnAmount);\\n    function ownerDeposit(uint256 amount) external payable;\\n    function ownerWithdraw(uint256 amount) external returns (uint256 withdrawnAmount);\\n    function setStakingManager(address _stakingManager) external;\\n    function setAutoStake(bool _autoStake) external;\\n\\n    function underlyingAsset() external view returns (address);\\n    function underlyingAssetAmountNoUpdate() external view returns (uint256);\\n    function underlyingAssetAmount() external returns (uint256);\\n    function autoStake() external view returns (bool);\\n    function stakingManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xaa6cb933519cb2321a03f2d965c9c564832aae736b25a324510ce535f3644083\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611733806100206000396000f3fe6080604052600436106101145760003560e01c806310cc25d714610120578063124a38d814610160578063180669431461018d5780631d212c96146101af5780631e18086e146101cf5780634789badd146101ef578063485cc955146102205780635ebaf1db14610240578063715018a61461026057806379ba5097146102755780638da5cb5b1461028a57806390bb56981461029f5780639f8f3244146102bf578063a29a43bb146102df578063a734f06e146102ff578063adc9772e14610327578063b24190831461033a578063c7c4ff461461035a578063e30c39781461037a578063ea682eeb1461038f578063f2c098b7146103af578063f2fde38b146103cf578063f3fef3a3146103ef57600080fd5b3661011b57005b600080fd5b34801561012c57600080fd5b5061014d61013b366004611512565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561016c57600080fd5b5061018061017b366004611512565b61040f565b604051610157919061152f565b34801561019957600080fd5b506101ad6101a8366004611543565b61045b565b005b3480156101bb57600080fd5b506101ad6101ca36600461158a565b6104cb565b3480156101db57600080fd5b506101ad6101ea3660046115a7565b61052b565b3480156101fb57600080fd5b5060035461021090600160a01b900460ff1681565b6040519015158152602001610157565b34801561022c57600080fd5b506101ad61023b366004611543565b61058c565b34801561024c57600080fd5b50600254610180906001600160a01b031681565b34801561026c57600080fd5b506101ad6106a1565b34801561028157600080fd5b506101ad6106b5565b34801561029657600080fd5b506101806106fd565b3480156102ab57600080fd5b5061014d6102ba366004611512565b610718565b3480156102cb57600080fd5b506101806102da3660046115a7565b6107f6565b3480156102eb57600080fd5b506101ad6102fa366004611512565b61082e565b34801561030b57600080fd5b5061018073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6101ad6103353660046115a7565b610881565b34801561034657600080fd5b5061014d610355366004611512565b610926565b34801561036657600080fd5b50600354610180906001600160a01b031681565b34801561038657600080fd5b50610180610a0d565b34801561039b57600080fd5b506101ad6103aa3660046115a7565b610a18565b3480156103bb57600080fd5b506101ad6103ca366004611512565b610cb6565b3480156103db57600080fd5b506101ad6103ea366004611512565b610d09565b3480156103fb57600080fd5b506101ad61040a3660046115a7565b610d7a565b6001600160a01b038116600090815260208181526040808320600190925282205481548110610440576104406115d3565b6000918252602090912001546001600160a01b031692915050565b610463610e1f565b6001600160a01b03828116600081815260208181526040808320805460018101825590845291832090910180546001600160a01b0319169486169485179055517ff5356ea32b86d53c1386eda4d869e6027a0a1d4edebb9c2f778d9f8559d236aa9190a35050565b6104d3610e1f565b60038054821515600160a01b0260ff60a01b199091161790556040517fc236baa3e21fdc712591cbbebfb2930bae5f479427ab19de579ef52e286804269061052090831515815260200190565b60405180910390a150565b610533610e1f565b6001600160a01b03821660008181526001602052604090819020839055517ff0703abfcce99547a9dfd5745a76d9d98e149d7a1e1682bdcba8e517ca3311a1906105809084815260200190565b60405180910390a25050565b6000610596610e51565b805490915060ff600160401b82041615906001600160401b03166000811580156105bd5750825b90506000826001600160401b031660011480156105d95750303b155b9050811580156105e7575080155b156106055760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561062e57845460ff60401b1916600160401b1785555b600280546001600160a01b0319166001600160a01b03881617905561065287610e75565b831561069857845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6106a9610e1f565b6106b36000610e86565b565b33806106bf610a0d565b6001600160a01b0316146106f1578060405163118cdaa760e01b81526004016106e8919061152f565b60405180910390fd5b6106fa81610e86565b50565b600080610708610ead565b546001600160a01b031692915050565b6000805b6001600160a01b0383166000908152602081905260409020548110156107f0576001600160a01b0383166000908152602081905260408120805483908110610766576107666115d3565b6000918252602091829020015460408051636a4e494f60e01b815290516001600160a01b0390921693508392636a4e494f926004808401938290030181865afa1580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db91906115e9565b6107e59084611618565b92505060010161071c565b50919050565b6000602052816000526040600020818154811061081257600080fd5b6000918252602090912001546001600160a01b03169150829050565b610836610e1f565b600280546001600160a01b0319166001600160a01b0383161790556040517f6901da73a3480b0bbd7deb64f259ff29a76ce811c7a3e5cf495f0e1eb4fb4dfb9061052090839061152f565b6002546001600160a01b031633146108ae5733604051631f18623160e21b81526004016106e8919061152f565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038316016108e1576108dc34610ed1565b6108eb565b6108eb8282610f4a565b816001600160a01b03167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a8260405161058091815260200190565b6000805b6001600160a01b0383166000908152602081905260409020548110156107f0576001600160a01b0383166000908152602081905260408120805483908110610974576109746115d3565b9060005260206000200160009054906101000a90046001600160a01b03169050806001600160a01b031663f48ccabd6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f891906115e9565b610a029084611618565b92505060010161092a565b600080610708611020565b610a20610e1f565b6001600160a01b0382166000908152602081905260408120805483908110610a4a57610a4a6115d3565b60009182526020808320909101546001600160a01b03868116845291839052604083205491169250610a7e9060019061162b565b6001600160a01b038516600090815260208190526040902080549192509082908110610aac57610aac6115d3565b60009182526020808320909101546001600160a01b038781168452918390526040909220805491909216919085908110610ae857610ae86115d3565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591861681529081905260409020805480610b2c57610b2c61163e565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0386168252600190526040902054839003610b8a576001600160a01b03841660009081526001602052604090208190555b6000826001600160a01b0316632e1a7d4d846001600160a01b031663f48ccabd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff91906115e9565b6040518263ffffffff1660e01b8152600401610c1d91815260200190565b6020604051808303816000875af1158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6091906115e9565b9050826001600160a01b0316856001600160a01b03167fc11b81149ee1579e4f558be47e79ebdefb8b0882f833687661c60ea700f2f79c83604051610ca791815260200190565b60405180910390a35050505050565b610cbe610e1f565b600380546001600160a01b0319166001600160a01b0383161790556040517fe5845022cf6cbbb6597b6e3a99005dd423016c1e7ac69c6e621cd47c38a3f3929061052090839061152f565b610d11610e1f565b6000610d1b611020565b80546001600160a01b0319166001600160a01b0384169081178255909150610d416106fd565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b6002546001600160a01b03163314610da75733604051631f18623160e21b81526004016106e8919061152f565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03831601610dda57610dd581611044565b610de4565b610de48282611166565b816001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648260405161058091815260200190565b33610e286106fd565b6001600160a01b0316146106b3573360405163118cdaa760e01b81526004016106e8919061152f565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b610e7d611212565b6106fa81611237565b6000610e90611020565b80546001600160a01b03191681559050610ea982611269565b5050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930090565b6000610ef073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61040f565b60405163b6b55f2560e01b8152600481018490529091506001600160a01b0382169063b6b55f259084906024016000604051808303818588803b158015610f3657600080fd5b505af1158015610698573d6000803e3d6000fd5b6000610f558361040f565b9050610f6c6001600160a01b0384163330856112c5565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390610f9a9084908690600401611654565b6020604051808303816000875af1158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd919061166d565b5060405163b6b55f2560e01b8152600481018390526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b158015610f3657600080fd5b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0090565b600061106373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61040f565b905060006001600160a01b038216156110e457604051632e1a7d4d60e01b8152600481018490526001600160a01b03831690632e1a7d4d906024016020604051808303816000875af11580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e191906115e9565b90505b60035460405160009182916001600160a01b039091169084908381818185875af1925050503d8060008114611135576040519150601f19603f3d011682016040523d82523d6000602084013e61113a565b606091505b50915091508161115f5780604051639a367e1760e01b81526004016106e891906116ae565b5050505050565b60006111718361040f565b905060006001600160a01b038216156111f257604051632e1a7d4d60e01b8152600481018490526001600160a01b03831690632e1a7d4d906024016020604051808303816000875af11580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ef91906115e9565b90505b60035461120c906001600160a01b0386811691168361132c565b50505050565b61121a611357565b6106b357604051631afcd79f60e31b815260040160405180910390fd5b61123f611212565b6001600160a01b0381166106f1576000604051631e4fbdf760e01b81526004016106e8919061152f565b6000611273610ead565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6040516001600160a01b03848116602483015283811660448301526064820183905261120c9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611371565b61135283846001600160a01b031663a9059cbb85856040516024016112fa929190611654565b505050565b6000611361610e51565b54600160401b900460ff16919050565b60006113866001600160a01b038416836113cb565b905080516000141580156113ab5750808060200190518101906113a9919061166d565b155b156113525782604051635274afe760e01b81526004016106e8919061152f565b60606113d9838360006113e2565b90505b92915050565b606081471015611407573060405163cd78605960e01b81526004016106e8919061152f565b600080856001600160a01b0316848660405161142391906116e1565b60006040518083038185875af1925050503d8060008114611460576040519150601f19603f3d011682016040523d82523d6000602084013e611465565b606091505b5091509150611475868383611481565b925050505b9392505050565b60608261149657611491826114d4565b61147a565b81511580156114ad57506001600160a01b0384163b155b156114cd5783604051639996b31560e01b81526004016106e8919061152f565b508061147a565b8051156114e45780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b03811681146106fa57600080fd5b60006020828403121561152457600080fd5b813561147a816114fd565b6001600160a01b0391909116815260200190565b6000806040838503121561155657600080fd5b8235611561816114fd565b91506020830135611571816114fd565b809150509250929050565b80151581146106fa57600080fd5b60006020828403121561159c57600080fd5b813561147a8161157c565b600080604083850312156115ba57600080fd5b82356115c5816114fd565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156115fb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156113dc576113dc611602565b818103818111156113dc576113dc611602565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b03929092168252602082015260400190565b60006020828403121561167f57600080fd5b815161147a8161157c565b60005b838110156116a557818101518382015260200161168d565b50506000910152565b60208152600082518060208401526116cd81604085016020870161168a565b601f01601f19169190910160400192915050565b600082516116f381846020870161168a565b919091019291505056fea2646970667358221220becfdbdf730be11aa06b4ea3b56942f15feda963a09df607ec3fa3ac6ffec92a64736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c806310cc25d714610120578063124a38d814610160578063180669431461018d5780631d212c96146101af5780631e18086e146101cf5780634789badd146101ef578063485cc955146102205780635ebaf1db14610240578063715018a61461026057806379ba5097146102755780638da5cb5b1461028a57806390bb56981461029f5780639f8f3244146102bf578063a29a43bb146102df578063a734f06e146102ff578063adc9772e14610327578063b24190831461033a578063c7c4ff461461035a578063e30c39781461037a578063ea682eeb1461038f578063f2c098b7146103af578063f2fde38b146103cf578063f3fef3a3146103ef57600080fd5b3661011b57005b600080fd5b34801561012c57600080fd5b5061014d61013b366004611512565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561016c57600080fd5b5061018061017b366004611512565b61040f565b604051610157919061152f565b34801561019957600080fd5b506101ad6101a8366004611543565b61045b565b005b3480156101bb57600080fd5b506101ad6101ca36600461158a565b6104cb565b3480156101db57600080fd5b506101ad6101ea3660046115a7565b61052b565b3480156101fb57600080fd5b5060035461021090600160a01b900460ff1681565b6040519015158152602001610157565b34801561022c57600080fd5b506101ad61023b366004611543565b61058c565b34801561024c57600080fd5b50600254610180906001600160a01b031681565b34801561026c57600080fd5b506101ad6106a1565b34801561028157600080fd5b506101ad6106b5565b34801561029657600080fd5b506101806106fd565b3480156102ab57600080fd5b5061014d6102ba366004611512565b610718565b3480156102cb57600080fd5b506101806102da3660046115a7565b6107f6565b3480156102eb57600080fd5b506101ad6102fa366004611512565b61082e565b34801561030b57600080fd5b5061018073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6101ad6103353660046115a7565b610881565b34801561034657600080fd5b5061014d610355366004611512565b610926565b34801561036657600080fd5b50600354610180906001600160a01b031681565b34801561038657600080fd5b50610180610a0d565b34801561039b57600080fd5b506101ad6103aa3660046115a7565b610a18565b3480156103bb57600080fd5b506101ad6103ca366004611512565b610cb6565b3480156103db57600080fd5b506101ad6103ea366004611512565b610d09565b3480156103fb57600080fd5b506101ad61040a3660046115a7565b610d7a565b6001600160a01b038116600090815260208181526040808320600190925282205481548110610440576104406115d3565b6000918252602090912001546001600160a01b031692915050565b610463610e1f565b6001600160a01b03828116600081815260208181526040808320805460018101825590845291832090910180546001600160a01b0319169486169485179055517ff5356ea32b86d53c1386eda4d869e6027a0a1d4edebb9c2f778d9f8559d236aa9190a35050565b6104d3610e1f565b60038054821515600160a01b0260ff60a01b199091161790556040517fc236baa3e21fdc712591cbbebfb2930bae5f479427ab19de579ef52e286804269061052090831515815260200190565b60405180910390a150565b610533610e1f565b6001600160a01b03821660008181526001602052604090819020839055517ff0703abfcce99547a9dfd5745a76d9d98e149d7a1e1682bdcba8e517ca3311a1906105809084815260200190565b60405180910390a25050565b6000610596610e51565b805490915060ff600160401b82041615906001600160401b03166000811580156105bd5750825b90506000826001600160401b031660011480156105d95750303b155b9050811580156105e7575080155b156106055760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561062e57845460ff60401b1916600160401b1785555b600280546001600160a01b0319166001600160a01b03881617905561065287610e75565b831561069857845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6106a9610e1f565b6106b36000610e86565b565b33806106bf610a0d565b6001600160a01b0316146106f1578060405163118cdaa760e01b81526004016106e8919061152f565b60405180910390fd5b6106fa81610e86565b50565b600080610708610ead565b546001600160a01b031692915050565b6000805b6001600160a01b0383166000908152602081905260409020548110156107f0576001600160a01b0383166000908152602081905260408120805483908110610766576107666115d3565b6000918252602091829020015460408051636a4e494f60e01b815290516001600160a01b0390921693508392636a4e494f926004808401938290030181865afa1580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db91906115e9565b6107e59084611618565b92505060010161071c565b50919050565b6000602052816000526040600020818154811061081257600080fd5b6000918252602090912001546001600160a01b03169150829050565b610836610e1f565b600280546001600160a01b0319166001600160a01b0383161790556040517f6901da73a3480b0bbd7deb64f259ff29a76ce811c7a3e5cf495f0e1eb4fb4dfb9061052090839061152f565b6002546001600160a01b031633146108ae5733604051631f18623160e21b81526004016106e8919061152f565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038316016108e1576108dc34610ed1565b6108eb565b6108eb8282610f4a565b816001600160a01b03167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a8260405161058091815260200190565b6000805b6001600160a01b0383166000908152602081905260409020548110156107f0576001600160a01b0383166000908152602081905260408120805483908110610974576109746115d3565b9060005260206000200160009054906101000a90046001600160a01b03169050806001600160a01b031663f48ccabd6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156109d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f891906115e9565b610a029084611618565b92505060010161092a565b600080610708611020565b610a20610e1f565b6001600160a01b0382166000908152602081905260408120805483908110610a4a57610a4a6115d3565b60009182526020808320909101546001600160a01b03868116845291839052604083205491169250610a7e9060019061162b565b6001600160a01b038516600090815260208190526040902080549192509082908110610aac57610aac6115d3565b60009182526020808320909101546001600160a01b038781168452918390526040909220805491909216919085908110610ae857610ae86115d3565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591861681529081905260409020805480610b2c57610b2c61163e565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0386168252600190526040902054839003610b8a576001600160a01b03841660009081526001602052604090208190555b6000826001600160a01b0316632e1a7d4d846001600160a01b031663f48ccabd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff91906115e9565b6040518263ffffffff1660e01b8152600401610c1d91815260200190565b6020604051808303816000875af1158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6091906115e9565b9050826001600160a01b0316856001600160a01b03167fc11b81149ee1579e4f558be47e79ebdefb8b0882f833687661c60ea700f2f79c83604051610ca791815260200190565b60405180910390a35050505050565b610cbe610e1f565b600380546001600160a01b0319166001600160a01b0383161790556040517fe5845022cf6cbbb6597b6e3a99005dd423016c1e7ac69c6e621cd47c38a3f3929061052090839061152f565b610d11610e1f565b6000610d1b611020565b80546001600160a01b0319166001600160a01b0384169081178255909150610d416106fd565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b6002546001600160a01b03163314610da75733604051631f18623160e21b81526004016106e8919061152f565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03831601610dda57610dd581611044565b610de4565b610de48282611166565b816001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648260405161058091815260200190565b33610e286106fd565b6001600160a01b0316146106b3573360405163118cdaa760e01b81526004016106e8919061152f565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b610e7d611212565b6106fa81611237565b6000610e90611020565b80546001600160a01b03191681559050610ea982611269565b5050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930090565b6000610ef073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61040f565b60405163b6b55f2560e01b8152600481018490529091506001600160a01b0382169063b6b55f259084906024016000604051808303818588803b158015610f3657600080fd5b505af1158015610698573d6000803e3d6000fd5b6000610f558361040f565b9050610f6c6001600160a01b0384163330856112c5565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390610f9a9084908690600401611654565b6020604051808303816000875af1158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd919061166d565b5060405163b6b55f2560e01b8152600481018390526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b158015610f3657600080fd5b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0090565b600061106373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61040f565b905060006001600160a01b038216156110e457604051632e1a7d4d60e01b8152600481018490526001600160a01b03831690632e1a7d4d906024016020604051808303816000875af11580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e191906115e9565b90505b60035460405160009182916001600160a01b039091169084908381818185875af1925050503d8060008114611135576040519150601f19603f3d011682016040523d82523d6000602084013e61113a565b606091505b50915091508161115f5780604051639a367e1760e01b81526004016106e891906116ae565b5050505050565b60006111718361040f565b905060006001600160a01b038216156111f257604051632e1a7d4d60e01b8152600481018490526001600160a01b03831690632e1a7d4d906024016020604051808303816000875af11580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ef91906115e9565b90505b60035461120c906001600160a01b0386811691168361132c565b50505050565b61121a611357565b6106b357604051631afcd79f60e31b815260040160405180910390fd5b61123f611212565b6001600160a01b0381166106f1576000604051631e4fbdf760e01b81526004016106e8919061152f565b6000611273610ead565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6040516001600160a01b03848116602483015283811660448301526064820183905261120c9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611371565b61135283846001600160a01b031663a9059cbb85856040516024016112fa929190611654565b505050565b6000611361610e51565b54600160401b900460ff16919050565b60006113866001600160a01b038416836113cb565b905080516000141580156113ab5750808060200190518101906113a9919061166d565b155b156113525782604051635274afe760e01b81526004016106e8919061152f565b60606113d9838360006113e2565b90505b92915050565b606081471015611407573060405163cd78605960e01b81526004016106e8919061152f565b600080856001600160a01b0316848660405161142391906116e1565b60006040518083038185875af1925050503d8060008114611460576040519150601f19603f3d011682016040523d82523d6000602084013e611465565b606091505b5091509150611475868383611481565b925050505b9392505050565b60608261149657611491826114d4565b61147a565b81511580156114ad57506001600160a01b0384163b155b156114cd5783604051639996b31560e01b81526004016106e8919061152f565b508061147a565b8051156114e45780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b03811681146106fa57600080fd5b60006020828403121561152457600080fd5b813561147a816114fd565b6001600160a01b0391909116815260200190565b6000806040838503121561155657600080fd5b8235611561816114fd565b91506020830135611571816114fd565b809150509250929050565b80151581146106fa57600080fd5b60006020828403121561159c57600080fd5b813561147a8161157c565b600080604083850312156115ba57600080fd5b82356115c5816114fd565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156115fb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156113dc576113dc611602565b818103818111156113dc576113dc611602565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b03929092168252602082015260400190565b60006020828403121561167f57600080fd5b815161147a8161157c565b60005b838110156116a557818101518382015260200161168d565b50506000910152565b60208152600082518060208401526116cd81604085016020870161168a565b601f01601f19169190910160400192915050565b600082516116f381846020870161168a565b919091019291505056fea2646970667358221220becfdbdf730be11aa06b4ea3b56942f15feda963a09df607ec3fa3ac6ffec92a64736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getActiveStrategy(address)": {
        "notice": "--------------------------------- 🔎 View Functions 🔍 ---------------------------------"
      },
      "setStaker(address)": {
        "notice": "---------------------------------- 🔓 Admin Functions 🔓 ----------------------------------"
      },
      "stake(address,uint256)": {
        "notice": "-------------------------------- 📝 Staker Functions 📝 --------------------------------"
      }
    },
    "notice": "The purpose of this contract is solely to take in assets and send them to strategies. Upon withdrawal, all assets go to the depositor. TODO: The depositor needs to be set after deployment",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4114,
        "contract": "src/StakingManager.sol:StakingManager",
        "label": "strategies",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_contract(IStakingStrategy)5332)dyn_storage)"
      },
      {
        "astId": 4118,
        "contract": "src/StakingManager.sol:StakingManager",
        "label": "activeStrategyIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4120,
        "contract": "src/StakingManager.sol:StakingManager",
        "label": "staker",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4122,
        "contract": "src/StakingManager.sol:StakingManager",
        "label": "depositor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4124,
        "contract": "src/StakingManager.sol:StakingManager",
        "label": "autoStake",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IStakingStrategy)5332)dyn_storage": {
        "base": "t_contract(IStakingStrategy)5332",
        "encoding": "dynamic_array",
        "label": "contract IStakingStrategy[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStakingStrategy)5332": {
        "encoding": "inplace",
        "label": "contract IStakingStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(IStakingStrategy)5332)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IStakingStrategy[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IStakingStrategy)5332)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}